{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport convert from 'react-from-dom';\nimport { canUseDOM, isSupportedEnvironment, omit, randomString, STATUS } from './helpers';\nexport var cacheStore = Object.create(null);\nvar InlineSVG = /** @class */function (_super) {\n  __extends(InlineSVG, _super);\n  function InlineSVG(props) {\n    var _this = _super.call(this, props) || this;\n    _this.isActive = false;\n    _this.handleLoad = function (content) {\n      /* istanbul ignore else */\n      if (_this.isActive) {\n        _this.setState({\n          content: content,\n          status: STATUS.LOADED\n        }, _this.getElement);\n      }\n    };\n    _this.handleError = function (error) {\n      var onError = _this.props.onError;\n      var status = error.message === 'Browser does not support SVG' ? STATUS.UNSUPPORTED : STATUS.FAILED;\n      /* istanbul ignore else */\n      if (_this.isActive) {\n        _this.setState({\n          status: status\n        }, function () {\n          /* istanbul ignore else */\n          if (typeof onError === 'function') {\n            onError(error);\n          }\n        });\n      }\n    };\n    _this.request = function () {\n      var _a = _this.props,\n        cacheRequests = _a.cacheRequests,\n        fetchOptions = _a.fetchOptions,\n        src = _a.src;\n      try {\n        if (cacheRequests) {\n          cacheStore[src] = {\n            content: '',\n            status: STATUS.LOADING\n          };\n        }\n        return fetch(src, fetchOptions).then(function (response) {\n          var contentType = response.headers.get('content-type');\n          var _a = __read((contentType || '').split(/ ?; ?/), 1),\n            fileType = _a[0];\n          if (response.status > 299) {\n            throw new Error('Not found');\n          }\n          if (!['image/svg+xml', 'text/plain'].some(function (d) {\n            return fileType.includes(d);\n          })) {\n            throw new Error(\"Content type isn't valid: \".concat(fileType));\n          }\n          return response.text();\n        }).then(function (content) {\n          var currentSrc = _this.props.src;\n          // the current src don't match the previous one, skipping...\n          if (src !== currentSrc) {\n            if (cacheStore[src].status === STATUS.LOADING) {\n              delete cacheStore[src];\n            }\n            return;\n          }\n          _this.handleLoad(content);\n          /* istanbul ignore else */\n          if (cacheRequests) {\n            var cache = cacheStore[src];\n            /* istanbul ignore else */\n            if (cache) {\n              cache.content = content;\n              cache.status = STATUS.LOADED;\n            }\n          }\n        }).catch(function (error) {\n          _this.handleError(error);\n          /* istanbul ignore else */\n          if (cacheRequests) {\n            var cache = cacheStore[src];\n            /* istanbul ignore else */\n            if (cache) {\n              delete cacheStore[src];\n            }\n          }\n        });\n      } catch (error) {\n        return _this.handleError(new Error(error.message));\n      }\n    };\n    _this.state = {\n      content: '',\n      element: null,\n      hasCache: !!props.cacheRequests && !!cacheStore[props.src],\n      status: STATUS.PENDING\n    };\n    _this.hash = props.uniqueHash || randomString(8);\n    return _this;\n  }\n  InlineSVG.prototype.componentDidMount = function () {\n    this.isActive = true;\n    if (!canUseDOM()) {\n      return;\n    }\n    var status = this.state.status;\n    var src = this.props.src;\n    try {\n      /* istanbul ignore else */\n      if (status === STATUS.PENDING) {\n        /* istanbul ignore else */\n        if (!isSupportedEnvironment()) {\n          throw new Error('Browser does not support SVG');\n        }\n        /* istanbul ignore else */\n        if (!src) {\n          throw new Error('Missing src');\n        }\n        this.load();\n      }\n    } catch (error) {\n      this.handleError(error);\n    }\n  };\n  InlineSVG.prototype.componentDidUpdate = function (previousProps, previousState) {\n    if (!canUseDOM()) {\n      return;\n    }\n    var _a = this.state,\n      hasCache = _a.hasCache,\n      status = _a.status;\n    var _b = this.props,\n      onLoad = _b.onLoad,\n      src = _b.src;\n    if (previousState.status !== STATUS.READY && status === STATUS.READY) {\n      /* istanbul ignore else */\n      if (onLoad) {\n        onLoad(src, hasCache);\n      }\n    }\n    if (previousProps.src !== src) {\n      if (!src) {\n        this.handleError(new Error('Missing src'));\n        return;\n      }\n      this.load();\n    }\n  };\n  InlineSVG.prototype.componentWillUnmount = function () {\n    this.isActive = false;\n  };\n  InlineSVG.prototype.getNode = function () {\n    var _a = this.props,\n      description = _a.description,\n      title = _a.title;\n    try {\n      var svgText = this.processSVG();\n      var node = convert(svgText, {\n        nodeOnly: true\n      });\n      if (!node || !(node instanceof SVGSVGElement)) {\n        throw new Error('Could not convert the src to a DOM Node');\n      }\n      var svg = this.updateSVGAttributes(node);\n      if (description) {\n        var originalDesc = svg.querySelector('desc');\n        if (originalDesc && originalDesc.parentNode) {\n          originalDesc.parentNode.removeChild(originalDesc);\n        }\n        var descElement = document.createElement('desc');\n        descElement.innerHTML = description;\n        svg.prepend(descElement);\n      }\n      if (title) {\n        var originalTitle = svg.querySelector('title');\n        if (originalTitle && originalTitle.parentNode) {\n          originalTitle.parentNode.removeChild(originalTitle);\n        }\n        var titleElement = document.createElement('title');\n        titleElement.innerHTML = title;\n        svg.prepend(titleElement);\n      }\n      return svg;\n    } catch (error) {\n      return this.handleError(error);\n    }\n  };\n  InlineSVG.prototype.getElement = function () {\n    try {\n      var node = this.getNode();\n      var element = convert(node);\n      if (!element || !React.isValidElement(element)) {\n        throw new Error('Could not convert the src to a React element');\n      }\n      this.setState({\n        element: element,\n        status: STATUS.READY\n      });\n    } catch (error) {\n      this.handleError(new Error(error.message));\n    }\n  };\n  InlineSVG.prototype.load = function () {\n    var _this = this;\n    /* istanbul ignore else */\n    if (this.isActive) {\n      this.setState({\n        content: '',\n        element: null,\n        status: STATUS.LOADING\n      }, function () {\n        var _a = _this.props,\n          cacheRequests = _a.cacheRequests,\n          src = _a.src;\n        var cache = cacheRequests && cacheStore[src];\n        if (cache && cache.status === STATUS.LOADED) {\n          _this.handleLoad(cache.content);\n          return;\n        }\n        var dataURI = src.match(/data:image\\/svg[^,]*?(;base64)?,(.*)/);\n        var inlineSrc;\n        if (dataURI) {\n          inlineSrc = dataURI[1] ? window.atob(dataURI[2]) : decodeURIComponent(dataURI[2]);\n        } else if (src.includes('<svg')) {\n          inlineSrc = src;\n        }\n        if (inlineSrc) {\n          _this.handleLoad(inlineSrc);\n          return;\n        }\n        _this.request();\n      });\n    }\n  };\n  InlineSVG.prototype.updateSVGAttributes = function (node) {\n    var _this = this;\n    var _a = this.props,\n      _b = _a.baseURL,\n      baseURL = _b === void 0 ? '' : _b,\n      uniquifyIDs = _a.uniquifyIDs;\n    var replaceableAttributes = ['id', 'href', 'xlink:href', 'xlink:role', 'xlink:arcrole'];\n    var linkAttributes = ['href', 'xlink:href'];\n    var isDataValue = function (name, value) {\n      return linkAttributes.includes(name) && (value ? !value.includes('#') : false);\n    };\n    if (!uniquifyIDs) {\n      return node;\n    }\n    __spreadArray([], __read(node.children), false).map(function (d) {\n      if (d.attributes && d.attributes.length) {\n        var attributes_1 = Object.values(d.attributes).map(function (a) {\n          var attribute = a;\n          var match = a.value.match(/url\\((.*?)\\)/);\n          if (match && match[1]) {\n            attribute.value = a.value.replace(match[0], \"url(\".concat(baseURL).concat(match[1], \"__\").concat(_this.hash, \")\"));\n          }\n          return attribute;\n        });\n        replaceableAttributes.forEach(function (r) {\n          var attribute = attributes_1.find(function (a) {\n            return a.name === r;\n          });\n          if (attribute && !isDataValue(r, attribute.value)) {\n            attribute.value = \"\".concat(attribute.value, \"__\").concat(_this.hash);\n          }\n        });\n      }\n      if (d.children.length) {\n        return _this.updateSVGAttributes(d);\n      }\n      return d;\n    });\n    return node;\n  };\n  InlineSVG.prototype.processSVG = function () {\n    var content = this.state.content;\n    var preProcessor = this.props.preProcessor;\n    if (preProcessor) {\n      return preProcessor(content);\n    }\n    return content;\n  };\n  InlineSVG.prototype.render = function () {\n    var _a = this.state,\n      element = _a.element,\n      status = _a.status;\n    var _b = this.props,\n      _c = _b.children,\n      children = _c === void 0 ? null : _c,\n      innerRef = _b.innerRef,\n      _d = _b.loader,\n      loader = _d === void 0 ? null : _d;\n    var elementProps = omit(this.props, 'baseURL', 'cacheRequests', 'children', 'description', 'fetchOptions', 'innerRef', 'loader', 'onError', 'onLoad', 'preProcessor', 'src', 'title', 'uniqueHash', 'uniquifyIDs');\n    if (!canUseDOM()) {\n      return loader;\n    }\n    if (element) {\n      return React.cloneElement(element, __assign({\n        ref: innerRef\n      }, elementProps));\n    }\n    if ([STATUS.UNSUPPORTED, STATUS.FAILED].includes(status)) {\n      return children;\n    }\n    return loader;\n  };\n  InlineSVG.defaultProps = {\n    cacheRequests: true,\n    uniquifyIDs: false\n  };\n  return InlineSVG;\n}(React.PureComponent);\nexport default InlineSVG;\nexport * from './types';","map":{"version":3,"names":["React","convert","canUseDOM","isSupportedEnvironment","omit","randomString","STATUS","cacheStore","Object","create","InlineSVG","_super","__extends","props","_this","call","isActive","handleLoad","content","setState","status","LOADED","getElement","handleError","error","onError","message","UNSUPPORTED","FAILED","request","_a","cacheRequests","fetchOptions","src","LOADING","fetch","then","response","contentType","headers","get","__read","split","fileType","Error","some","d","includes","concat","text","currentSrc","cache","catch","state","element","hasCache","PENDING","hash","uniqueHash","prototype","componentDidMount","load","componentDidUpdate","previousProps","previousState","_b","onLoad","READY","componentWillUnmount","getNode","description","title","svgText","processSVG","node","nodeOnly","SVGSVGElement","svg","updateSVGAttributes","originalDesc","querySelector","parentNode","removeChild","descElement","document","createElement","innerHTML","prepend","originalTitle","titleElement","isValidElement","dataURI","match","inlineSrc","window","atob","decodeURIComponent","baseURL","uniquifyIDs","replaceableAttributes","linkAttributes","isDataValue","name","value","__spreadArray","children","map","attributes","length","attributes_1","values","a","attribute","replace","forEach","r","find","preProcessor","render","_c","innerRef","_d","loader","elementProps","cloneElement","__assign","ref","defaultProps","PureComponent"],"sources":["E:\\tappware Task\\react app\\GENText-FrontEnd\\node_modules\\react-inlinesvg\\src\\index.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport convert from 'react-from-dom';\r\n\r\nimport { canUseDOM, isSupportedEnvironment, omit, randomString, STATUS } from './helpers';\r\nimport { FetchError, Props, State, StorageItem } from './types';\r\n\r\nexport const cacheStore: { [key: string]: StorageItem } = Object.create(null);\r\n\r\nexport default class InlineSVG extends React.PureComponent<Props, State> {\r\n  private isActive = false;\r\n  private readonly hash: string;\r\n\r\n  public static defaultProps = {\r\n    cacheRequests: true,\r\n    uniquifyIDs: false,\r\n  };\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      content: '',\r\n      element: null,\r\n      hasCache: !!props.cacheRequests && !!cacheStore[props.src],\r\n      status: STATUS.PENDING,\r\n    };\r\n\r\n    this.hash = props.uniqueHash || randomString(8);\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    this.isActive = true;\r\n\r\n    if (!canUseDOM()) {\r\n      return;\r\n    }\r\n\r\n    const { status } = this.state;\r\n    const { src } = this.props;\r\n\r\n    try {\r\n      /* istanbul ignore else */\r\n      if (status === STATUS.PENDING) {\r\n        /* istanbul ignore else */\r\n        if (!isSupportedEnvironment()) {\r\n          throw new Error('Browser does not support SVG');\r\n        }\r\n\r\n        /* istanbul ignore else */\r\n        if (!src) {\r\n          throw new Error('Missing src');\r\n        }\r\n\r\n        this.load();\r\n      }\r\n    } catch (error: any) {\r\n      this.handleError(error);\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(previousProps: Props, previousState: State): void {\r\n    if (!canUseDOM()) {\r\n      return;\r\n    }\r\n\r\n    const { hasCache, status } = this.state;\r\n    const { onLoad, src } = this.props;\r\n\r\n    if (previousState.status !== STATUS.READY && status === STATUS.READY) {\r\n      /* istanbul ignore else */\r\n      if (onLoad) {\r\n        onLoad(src, hasCache);\r\n      }\r\n    }\r\n\r\n    if (previousProps.src !== src) {\r\n      if (!src) {\r\n        this.handleError(new Error('Missing src'));\r\n\r\n        return;\r\n      }\r\n\r\n      this.load();\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    this.isActive = false;\r\n  }\r\n\r\n  private getNode() {\r\n    const { description, title } = this.props;\r\n\r\n    try {\r\n      const svgText = this.processSVG();\r\n      const node = convert(svgText, { nodeOnly: true });\r\n\r\n      if (!node || !(node instanceof SVGSVGElement)) {\r\n        throw new Error('Could not convert the src to a DOM Node');\r\n      }\r\n\r\n      const svg = this.updateSVGAttributes(node);\r\n\r\n      if (description) {\r\n        const originalDesc = svg.querySelector('desc');\r\n\r\n        if (originalDesc && originalDesc.parentNode) {\r\n          originalDesc.parentNode.removeChild(originalDesc);\r\n        }\r\n\r\n        const descElement = document.createElement('desc');\r\n\r\n        descElement.innerHTML = description;\r\n        svg.prepend(descElement);\r\n      }\r\n\r\n      if (title) {\r\n        const originalTitle = svg.querySelector('title');\r\n\r\n        if (originalTitle && originalTitle.parentNode) {\r\n          originalTitle.parentNode.removeChild(originalTitle);\r\n        }\r\n\r\n        const titleElement = document.createElement('title');\r\n\r\n        titleElement.innerHTML = title;\r\n        svg.prepend(titleElement);\r\n      }\r\n\r\n      return svg;\r\n    } catch (error: any) {\r\n      return this.handleError(error);\r\n    }\r\n  }\r\n\r\n  private getElement() {\r\n    try {\r\n      const node = this.getNode() as Node;\r\n      const element = convert(node);\r\n\r\n      if (!element || !React.isValidElement(element)) {\r\n        throw new Error('Could not convert the src to a React element');\r\n      }\r\n\r\n      this.setState({\r\n        element,\r\n        status: STATUS.READY,\r\n      });\r\n    } catch (error: any) {\r\n      this.handleError(new Error(error.message));\r\n    }\r\n  }\r\n\r\n  private handleLoad = (content: string) => {\r\n    /* istanbul ignore else */\r\n    if (this.isActive) {\r\n      this.setState(\r\n        {\r\n          content,\r\n          status: STATUS.LOADED,\r\n        },\r\n        this.getElement,\r\n      );\r\n    }\r\n  };\r\n\r\n  private handleError = (error: Error | FetchError) => {\r\n    const { onError } = this.props;\r\n    const status =\r\n      error.message === 'Browser does not support SVG' ? STATUS.UNSUPPORTED : STATUS.FAILED;\r\n\r\n    /* istanbul ignore else */\r\n    if (this.isActive) {\r\n      this.setState({ status }, () => {\r\n        /* istanbul ignore else */\r\n        if (typeof onError === 'function') {\r\n          onError(error);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  private request = () => {\r\n    const { cacheRequests, fetchOptions, src } = this.props;\r\n\r\n    try {\r\n      if (cacheRequests) {\r\n        cacheStore[src] = { content: '', status: STATUS.LOADING };\r\n      }\r\n\r\n      return fetch(src, fetchOptions)\r\n        .then(response => {\r\n          const contentType = response.headers.get('content-type');\r\n          const [fileType] = (contentType || '').split(/ ?; ?/);\r\n\r\n          if (response.status > 299) {\r\n            throw new Error('Not found');\r\n          }\r\n\r\n          if (!['image/svg+xml', 'text/plain'].some(d => fileType.includes(d))) {\r\n            throw new Error(`Content type isn't valid: ${fileType}`);\r\n          }\r\n\r\n          return response.text();\r\n        })\r\n        .then(content => {\r\n          const { src: currentSrc } = this.props;\r\n\r\n          // the current src don't match the previous one, skipping...\r\n          if (src !== currentSrc) {\r\n            if (cacheStore[src].status === STATUS.LOADING) {\r\n              delete cacheStore[src];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          this.handleLoad(content);\r\n\r\n          /* istanbul ignore else */\r\n          if (cacheRequests) {\r\n            const cache = cacheStore[src];\r\n\r\n            /* istanbul ignore else */\r\n            if (cache) {\r\n              cache.content = content;\r\n              cache.status = STATUS.LOADED;\r\n            }\r\n          }\r\n        })\r\n        .catch(error => {\r\n          this.handleError(error);\r\n\r\n          /* istanbul ignore else */\r\n          if (cacheRequests) {\r\n            const cache = cacheStore[src];\r\n\r\n            /* istanbul ignore else */\r\n            if (cache) {\r\n              delete cacheStore[src];\r\n            }\r\n          }\r\n        });\r\n    } catch (error: any) {\r\n      return this.handleError(new Error(error.message));\r\n    }\r\n  };\r\n\r\n  private load() {\r\n    /* istanbul ignore else */\r\n    if (this.isActive) {\r\n      this.setState(\r\n        {\r\n          content: '',\r\n          element: null,\r\n          status: STATUS.LOADING,\r\n        },\r\n        () => {\r\n          const { cacheRequests, src } = this.props;\r\n          const cache = cacheRequests && cacheStore[src];\r\n\r\n          if (cache && cache.status === STATUS.LOADED) {\r\n            this.handleLoad(cache.content);\r\n\r\n            return;\r\n          }\r\n\r\n          const dataURI = src.match(/data:image\\/svg[^,]*?(;base64)?,(.*)/);\r\n          let inlineSrc;\r\n\r\n          if (dataURI) {\r\n            inlineSrc = dataURI[1] ? window.atob(dataURI[2]) : decodeURIComponent(dataURI[2]);\r\n          } else if (src.includes('<svg')) {\r\n            inlineSrc = src;\r\n          }\r\n\r\n          if (inlineSrc) {\r\n            this.handleLoad(inlineSrc);\r\n\r\n            return;\r\n          }\r\n\r\n          this.request();\r\n        },\r\n      );\r\n    }\r\n  }\r\n\r\n  private updateSVGAttributes(node: SVGSVGElement): SVGSVGElement {\r\n    const { baseURL = '', uniquifyIDs } = this.props;\r\n    const replaceableAttributes = ['id', 'href', 'xlink:href', 'xlink:role', 'xlink:arcrole'];\r\n    const linkAttributes = ['href', 'xlink:href'];\r\n    const isDataValue = (name: string, value: string) =>\r\n      linkAttributes.includes(name) && (value ? !value.includes('#') : false);\r\n\r\n    if (!uniquifyIDs) {\r\n      return node;\r\n    }\r\n\r\n    [...node.children].map(d => {\r\n      if (d.attributes && d.attributes.length) {\r\n        const attributes = Object.values(d.attributes).map(a => {\r\n          const attribute = a;\r\n          const match = a.value.match(/url\\((.*?)\\)/);\r\n\r\n          if (match && match[1]) {\r\n            attribute.value = a.value.replace(match[0], `url(${baseURL}${match[1]}__${this.hash})`);\r\n          }\r\n\r\n          return attribute;\r\n        });\r\n\r\n        replaceableAttributes.forEach(r => {\r\n          const attribute = attributes.find(a => a.name === r);\r\n\r\n          if (attribute && !isDataValue(r, attribute.value)) {\r\n            attribute.value = `${attribute.value}__${this.hash}`;\r\n          }\r\n        });\r\n      }\r\n\r\n      if (d.children.length) {\r\n        return this.updateSVGAttributes(d as SVGSVGElement);\r\n      }\r\n\r\n      return d;\r\n    });\r\n\r\n    return node;\r\n  }\r\n\r\n  private processSVG() {\r\n    const { content } = this.state;\r\n    const { preProcessor } = this.props;\r\n\r\n    if (preProcessor) {\r\n      return preProcessor(content);\r\n    }\r\n\r\n    return content;\r\n  }\r\n\r\n  public render(): React.ReactNode {\r\n    const { element, status } = this.state;\r\n    const { children = null, innerRef, loader = null } = this.props;\r\n    const elementProps = omit(\r\n      this.props,\r\n      'baseURL',\r\n      'cacheRequests',\r\n      'children',\r\n      'description',\r\n      'fetchOptions',\r\n      'innerRef',\r\n      'loader',\r\n      'onError',\r\n      'onLoad',\r\n      'preProcessor',\r\n      'src',\r\n      'title',\r\n      'uniqueHash',\r\n      'uniquifyIDs',\r\n    );\r\n\r\n    if (!canUseDOM()) {\r\n      return loader;\r\n    }\r\n\r\n    if (element) {\r\n      return React.cloneElement(element as React.ReactElement, { ref: innerRef, ...elementProps });\r\n    }\r\n\r\n    if ([STATUS.UNSUPPORTED, STATUS.FAILED].includes(status)) {\r\n      return children;\r\n    }\r\n\r\n    return loader;\r\n  }\r\n}\r\n\r\nexport * from './types';\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}