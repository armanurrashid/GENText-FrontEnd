{"ast":null,"code":"/* eslint-disable array-callback-return */\n/* eslint-disable no-useless-escape */\nimport { DataUtil } from '../_utils/index';\nconst defaultPasswordMeterOptions = {\n  minLength: 8,\n  checkUppercase: true,\n  checkLowercase: true,\n  checkDigit: true,\n  checkChar: true,\n  scoreHighlightClass: 'active'\n};\nconst defaultPasswordMeterQueires = {\n  componentName: 'password-meter',\n  instanseQuery: '[data-kt-password-meter]',\n  inputQuery: 'input[type]',\n  visibilityQuery: '[data-kt-password-meter-control=\"visibility\"]',\n  highlightQuery: '[data-kt-password-meter-control=\"highlight\"]'\n};\nclass PasswordMeterComponent {\n  constructor(_element, _options, _queries) {\n    this.element = void 0;\n    this.inputElement = void 0;\n    this.visibilityElement = void 0;\n    this.highlightElement = void 0;\n    this.options = void 0;\n    this.queries = void 0;\n    this.score = void 0;\n    this.checkSteps = void 0;\n    ///////////////////////\n    // ** Public API  ** //\n    ///////////////////////\n    this.reset = () => {\n      this.score = 0;\n      this.highlight();\n    };\n    this.element = _element;\n    this.options = Object.assign(defaultPasswordMeterOptions, _options);\n    this.queries = _queries;\n    this.score = 0;\n    this.checkSteps = 5;\n\n    // Elements\n    this.inputElement = this.element.querySelector(this.queries.inputQuery);\n    this.visibilityElement = this.element.querySelector(this.queries.visibilityQuery);\n    this.highlightElement = this.element.querySelector(this.queries.highlightQuery);\n\n    // Event Handlers\n    this.handlers();\n    DataUtil.set(this.element, this.queries.componentName, this);\n  }\n  handlers() {\n    if (this.inputElement) {\n      this.inputElement.addEventListener('input', () => {\n        this.check();\n      });\n    }\n    if (this.visibilityElement) {\n      this.visibilityElement.addEventListener('click', () => {\n        this.visitbility();\n      });\n    }\n  }\n  visitbility() {\n    if (this.visibilityElement && this.inputElement) {\n      const visibleIcon = this.visibilityElement.querySelector('i:not(.d-none), .:not(.d-none)');\n      const hiddenIcon = this.visibilityElement.querySelector('i.d-none, ..d-none');\n      const typeAttr = this.inputElement.getAttribute('type') || '';\n      if (typeAttr === 'password') {\n        this.inputElement.setAttribute('type', 'text');\n      } else {\n        this.inputElement.setAttribute('type', 'password');\n      }\n      visibleIcon === null || visibleIcon === void 0 ? void 0 : visibleIcon.classList.add('d-none');\n      hiddenIcon === null || hiddenIcon === void 0 ? void 0 : hiddenIcon.classList.remove('d-none');\n      this.inputElement.focus();\n    }\n  }\n  checkScore() {\n    return 0;\n  }\n  checkLength() {\n    if (this.inputElement) {\n      return this.inputElement.value.length >= this.options.minLength; // 20 score\n    }\n\n    return false;\n  }\n  checkLowerCase() {\n    const val = this.inputElement ? this.inputElement.value : '';\n    return /[a-z]/.test(val); // 20 score\n  }\n\n  checkUppercase() {\n    const val = this.inputElement ? this.inputElement.value : '';\n    return /[A-Z]/.test(val); // 20 score\n  }\n\n  checkDigit() {\n    const val = this.inputElement ? this.inputElement.value : '';\n    return /[0-9]/.test(val); // 20 score\n  }\n\n  checkChar() {\n    const val = this.inputElement ? this.inputElement.value : '';\n    return /[~`!#$%\\^&*+=\\-\\[\\]\\\\';,/{}|\\\\\":<>\\?]/g.test(val); // 20 score\n  }\n\n  getCheckScore() {\n    let count = 1;\n    if (this.options.checkUppercase) {\n      count++;\n    }\n    if (this.options.checkLowercase) {\n      count++;\n    }\n    if (this.options.checkDigit) {\n      count++;\n    }\n    if (this.options.checkChar) {\n      count++;\n    }\n    this.checkSteps = count;\n    return 100 / this.checkSteps;\n  }\n  highlight() {\n    const items = this.highlightElement ? [].slice.call(this.highlightElement.querySelectorAll('div')) : [];\n    const total = items.length;\n    let index = 0;\n    const checkScore = this.getCheckScore();\n    const score = this.getScore();\n    items.map(item => {\n      index++;\n      if (checkScore * index * (this.checkSteps / total) <= score) {\n        item.classList.add('active');\n      } else {\n        item.classList.remove('active');\n      }\n    });\n  }\n  getScore() {\n    return this.score;\n  }\n  check() {\n    let score = 0;\n    const checkScore = this.getCheckScore();\n    if (this.checkLength()) {\n      score = score + checkScore;\n    }\n    if (this.options.checkUppercase && this.checkLowerCase()) {\n      score = score + checkScore;\n    }\n    if (this.options.checkLowercase && this.checkUppercase()) {\n      score = score + checkScore;\n    }\n    if (this.options.checkDigit && this.checkDigit()) {\n      score = score + checkScore;\n    }\n    if (this.options.checkChar && this.checkChar()) {\n      score = score + checkScore;\n    }\n    this.score = score;\n    this.highlight();\n  }\n\n  // Static methods\n}\nPasswordMeterComponent.getInstance = function (el) {\n  let componentName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultPasswordMeterQueires.componentName;\n  const passwordMeter = DataUtil.get(el, componentName);\n  if (passwordMeter) {\n    return passwordMeter;\n  }\n};\nPasswordMeterComponent.createInstances = function () {\n  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPasswordMeterQueires.instanseQuery;\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultPasswordMeterOptions;\n  let queries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultPasswordMeterQueires;\n  const elements = document.body.querySelectorAll(selector);\n  elements.forEach(el => {\n    const item = el;\n    let passwordMeter = PasswordMeterComponent.getInstance(item);\n    if (!passwordMeter) {\n      passwordMeter = new PasswordMeterComponent(item, options, queries);\n    }\n  });\n};\nPasswordMeterComponent.createInsance = function () {\n  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPasswordMeterQueires.instanseQuery;\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultPasswordMeterOptions;\n  let queries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultPasswordMeterQueires;\n  const element = document.body.querySelector(selector);\n  if (!element) {\n    return;\n  }\n  const item = element;\n  let passwordMeter = PasswordMeterComponent.getInstance(item);\n  if (!passwordMeter) {\n    passwordMeter = new PasswordMeterComponent(item, options, queries);\n  }\n  return passwordMeter;\n};\nPasswordMeterComponent.bootstrap = function () {\n  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPasswordMeterQueires.instanseQuery;\n  PasswordMeterComponent.createInstances(selector);\n};\nPasswordMeterComponent.reinitialization = function () {\n  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPasswordMeterQueires.instanseQuery;\n  PasswordMeterComponent.createInstances(selector);\n};\nexport { PasswordMeterComponent, defaultPasswordMeterOptions, defaultPasswordMeterQueires };","map":{"version":3,"names":["DataUtil","defaultPasswordMeterOptions","minLength","checkUppercase","checkLowercase","checkDigit","checkChar","scoreHighlightClass","defaultPasswordMeterQueires","componentName","instanseQuery","inputQuery","visibilityQuery","highlightQuery","PasswordMeterComponent","constructor","_element","_options","_queries","element","inputElement","visibilityElement","highlightElement","options","queries","score","checkSteps","reset","highlight","Object","assign","querySelector","handlers","set","addEventListener","check","visitbility","visibleIcon","hiddenIcon","typeAttr","getAttribute","setAttribute","classList","add","remove","focus","checkScore","checkLength","value","length","checkLowerCase","val","test","getCheckScore","count","items","slice","call","querySelectorAll","total","index","getScore","map","item","getInstance","el","arguments","undefined","passwordMeter","get","createInstances","selector","elements","document","body","forEach","createInsance","bootstrap","reinitialization"],"sources":["E:/tappware Task/react app/GENText-FrontEnd/src/_metronic/assets/ts/components/_PasswordMeterComponent.ts"],"sourcesContent":["/* eslint-disable array-callback-return */\r\n/* eslint-disable no-useless-escape */\r\nimport {DataUtil} from '../_utils/index'\r\n\r\nexport interface IPasswordMeterOptions {\r\n  minLength: number\r\n  checkUppercase: boolean\r\n  checkLowercase: boolean\r\n  checkDigit: boolean\r\n  checkChar: boolean\r\n  scoreHighlightClass: string\r\n}\r\n\r\nexport interface IPasswordMeterQueries {\r\n  componentName: string\r\n  instanseQuery: string\r\n  inputQuery: string\r\n  visibilityQuery: string\r\n  highlightQuery: string\r\n}\r\n\r\nconst defaultPasswordMeterOptions = {\r\n  minLength: 8,\r\n  checkUppercase: true,\r\n  checkLowercase: true,\r\n  checkDigit: true,\r\n  checkChar: true,\r\n  scoreHighlightClass: 'active',\r\n}\r\n\r\nconst defaultPasswordMeterQueires: IPasswordMeterQueries = {\r\n  componentName: 'password-meter',\r\n  instanseQuery: '[data-kt-password-meter]',\r\n  inputQuery: 'input[type]',\r\n  visibilityQuery: '[data-kt-password-meter-control=\"visibility\"]',\r\n  highlightQuery: '[data-kt-password-meter-control=\"highlight\"]',\r\n}\r\n\r\nclass PasswordMeterComponent {\r\n  element: HTMLElement\r\n  inputElement: HTMLInputElement | null\r\n  visibilityElement: HTMLElement | null\r\n  highlightElement: HTMLElement | null\r\n  options: IPasswordMeterOptions\r\n  queries: IPasswordMeterQueries\r\n  score: number\r\n  checkSteps: number\r\n\r\n  constructor(\r\n    _element: HTMLElement,\r\n    _options: IPasswordMeterOptions,\r\n    _queries: IPasswordMeterQueries\r\n  ) {\r\n    this.element = _element\r\n    this.options = Object.assign(defaultPasswordMeterOptions, _options)\r\n    this.queries = _queries\r\n    this.score = 0\r\n    this.checkSteps = 5\r\n\r\n    // Elements\r\n    this.inputElement = this.element.querySelector(this.queries.inputQuery)\r\n    this.visibilityElement = this.element.querySelector(this.queries.visibilityQuery)\r\n    this.highlightElement = this.element.querySelector(this.queries.highlightQuery)\r\n\r\n    // Event Handlers\r\n    this.handlers()\r\n\r\n    DataUtil.set(this.element, this.queries.componentName, this)\r\n  }\r\n\r\n  private handlers(): void {\r\n    if (this.inputElement) {\r\n      this.inputElement.addEventListener('input', () => {\r\n        this.check()\r\n      })\r\n    }\r\n\r\n    if (this.visibilityElement) {\r\n      this.visibilityElement.addEventListener('click', () => {\r\n        this.visitbility()\r\n      })\r\n    }\r\n  }\r\n\r\n  private visitbility() {\r\n    if (this.visibilityElement && this.inputElement) {\r\n      const visibleIcon = this.visibilityElement.querySelector('i:not(.d-none), .:not(.d-none)')\r\n\r\n      const hiddenIcon = this.visibilityElement.querySelector('i.d-none, ..d-none')\r\n\r\n      const typeAttr = this.inputElement.getAttribute('type') || ''\r\n\r\n      if (typeAttr === 'password') {\r\n        this.inputElement.setAttribute('type', 'text')\r\n      } else {\r\n        this.inputElement.setAttribute('type', 'password')\r\n      }\r\n\r\n      visibleIcon?.classList.add('d-none')\r\n      hiddenIcon?.classList.remove('d-none')\r\n\r\n      this.inputElement.focus()\r\n    }\r\n  }\r\n\r\n  private checkScore(): number {\r\n    return 0\r\n  }\r\n\r\n  private checkLength(): boolean {\r\n    if (this.inputElement) {\r\n      return this.inputElement.value.length >= this.options.minLength // 20 score\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  private checkLowerCase(): boolean {\r\n    const val = this.inputElement ? this.inputElement.value : ''\r\n    return /[a-z]/.test(val) // 20 score\r\n  }\r\n\r\n  private checkUppercase(): boolean {\r\n    const val = this.inputElement ? this.inputElement.value : ''\r\n    return /[A-Z]/.test(val) // 20 score\r\n  }\r\n\r\n  private checkDigit(): boolean {\r\n    const val = this.inputElement ? this.inputElement.value : ''\r\n    return /[0-9]/.test(val) // 20 score\r\n  }\r\n\r\n  private checkChar(): boolean {\r\n    const val = this.inputElement ? this.inputElement.value : ''\r\n    return /[~`!#$%\\^&*+=\\-\\[\\]\\\\';,/{}|\\\\\":<>\\?]/g.test(val) // 20 score\r\n  }\r\n\r\n  private getCheckScore(): number {\r\n    let count = 1\r\n    if (this.options.checkUppercase) {\r\n      count++\r\n    }\r\n\r\n    if (this.options.checkLowercase) {\r\n      count++\r\n    }\r\n\r\n    if (this.options.checkDigit) {\r\n      count++\r\n    }\r\n\r\n    if (this.options.checkChar) {\r\n      count++\r\n    }\r\n\r\n    this.checkSteps = count\r\n    return 100 / this.checkSteps\r\n  }\r\n\r\n  private highlight() {\r\n    const items = this.highlightElement\r\n      ? [].slice.call(this.highlightElement.querySelectorAll('div'))\r\n      : []\r\n    const total = items.length\r\n    let index = 0\r\n    const checkScore = this.getCheckScore()\r\n    const score = this.getScore()\r\n\r\n    items.map((item: HTMLElement) => {\r\n      index++\r\n      if (checkScore * index * (this.checkSteps / total) <= score) {\r\n        item.classList.add('active')\r\n      } else {\r\n        item.classList.remove('active')\r\n      }\r\n    })\r\n  }\r\n\r\n  ///////////////////////\r\n  // ** Public API  ** //\r\n  ///////////////////////\r\n  public reset = () => {\r\n    this.score = 0\r\n    this.highlight()\r\n  }\r\n\r\n  public getScore() {\r\n    return this.score\r\n  }\r\n\r\n  public check() {\r\n    let score = 0\r\n    const checkScore = this.getCheckScore()\r\n    if (this.checkLength()) {\r\n      score = score + checkScore\r\n    }\r\n\r\n    if (this.options.checkUppercase && this.checkLowerCase()) {\r\n      score = score + checkScore\r\n    }\r\n\r\n    if (this.options.checkLowercase && this.checkUppercase()) {\r\n      score = score + checkScore\r\n    }\r\n\r\n    if (this.options.checkDigit && this.checkDigit()) {\r\n      score = score + checkScore\r\n    }\r\n\r\n    if (this.options.checkChar && this.checkChar()) {\r\n      score = score + checkScore\r\n    }\r\n\r\n    this.score = score\r\n    this.highlight()\r\n  }\r\n\r\n  // Static methods\r\n  public static getInstance = (\r\n    el: HTMLElement,\r\n    componentName: string = defaultPasswordMeterQueires.componentName\r\n  ): PasswordMeterComponent | undefined => {\r\n    const passwordMeter = DataUtil.get(el, componentName)\r\n    if (passwordMeter) {\r\n      return passwordMeter as PasswordMeterComponent\r\n    }\r\n  }\r\n\r\n  public static createInstances = (\r\n    selector: string = defaultPasswordMeterQueires.instanseQuery,\r\n    options: IPasswordMeterOptions = defaultPasswordMeterOptions,\r\n    queries: IPasswordMeterQueries = defaultPasswordMeterQueires\r\n  ) => {\r\n    const elements = document.body.querySelectorAll(selector)\r\n    elements.forEach((el) => {\r\n      const item = el as HTMLElement\r\n      let passwordMeter = PasswordMeterComponent.getInstance(item)\r\n      if (!passwordMeter) {\r\n        passwordMeter = new PasswordMeterComponent(item, options, queries)\r\n      }\r\n    })\r\n  }\r\n\r\n  public static createInsance = (\r\n    selector: string = defaultPasswordMeterQueires.instanseQuery,\r\n    options: IPasswordMeterOptions = defaultPasswordMeterOptions,\r\n    queries: IPasswordMeterQueries = defaultPasswordMeterQueires\r\n  ): PasswordMeterComponent | undefined => {\r\n    const element = document.body.querySelector(selector)\r\n    if (!element) {\r\n      return\r\n    }\r\n    const item = element as HTMLElement\r\n    let passwordMeter = PasswordMeterComponent.getInstance(item)\r\n    if (!passwordMeter) {\r\n      passwordMeter = new PasswordMeterComponent(item, options, queries)\r\n    }\r\n    return passwordMeter\r\n  }\r\n\r\n  public static bootstrap = (selector: string = defaultPasswordMeterQueires.instanseQuery) => {\r\n    PasswordMeterComponent.createInstances(selector)\r\n  }\r\n\r\n  public static reinitialization = (\r\n    selector: string = defaultPasswordMeterQueires.instanseQuery\r\n  ) => {\r\n    PasswordMeterComponent.createInstances(selector)\r\n  }\r\n}\r\nexport {PasswordMeterComponent, defaultPasswordMeterOptions, defaultPasswordMeterQueires}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}