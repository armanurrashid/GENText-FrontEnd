{"ast":null,"code":"var _jsxFileName = \"E:\\\\GENText\\\\src\\\\app\\\\modules\\\\apps\\\\user-management\\\\users-list\\\\components\\\\header\\\\UsersListSearchComponent.tsx\",\n  _s = $RefreshSig$();\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from 'react';\nimport { initialQueryState, KTIcon, useDebounce } from '../../../../../../../_metronic/helpers';\nimport { useQueryRequest } from '../../core/QueryRequestProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UsersListSearchComponent = () => {\n  _s();\n  const {\n    updateState\n  } = useQueryRequest();\n  const [searchTerm, setSearchTerm] = useState('');\n  // Debounce search term so that it only gives us latest value ...\n  // ... if searchTerm has not been updated within last 500ms.\n  // The goal is to only have the API call fire when user stops typing ...\n  // ... so that we aren't hitting our API rapidly.\n  const debouncedSearchTerm = useDebounce(searchTerm, 150);\n  // Effect for API call\n  useEffect(() => {\n    if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\n      updateState({\n        search: debouncedSearchTerm,\n        ...initialQueryState\n      });\n    }\n  }, [debouncedSearchTerm] // Only call effect if debounced search term changes\n  // More details about useDebounce: https://usehooks.com/useDebounce/\n  );\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-title\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex align-items-center position-relative my-1\",\n      children: [/*#__PURE__*/_jsxDEV(KTIcon, {\n        iconName: \"magnifier\",\n        className: \"fs-1 position-absolute ms-6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        \"data-kt-user-table-filter\": \"search\",\n        className: \"form-control form-control-solid w-250px ps-14\",\n        placeholder: \"Search user\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(UsersListSearchComponent, \"N5t1gXRTZ2VuTlZ7A5BEplYJTUg=\", false, function () {\n  return [useQueryRequest, useDebounce];\n});\n_c = UsersListSearchComponent;\nexport { UsersListSearchComponent };\nvar _c;\n$RefreshReg$(_c, \"UsersListSearchComponent\");","map":{"version":3,"names":["useEffect","useState","initialQueryState","KTIcon","useDebounce","useQueryRequest","jsxDEV","_jsxDEV","UsersListSearchComponent","_s","updateState","searchTerm","setSearchTerm","debouncedSearchTerm","undefined","search","className","children","iconName","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["E:/GENText/src/app/modules/apps/user-management/users-list/components/header/UsersListSearchComponent.tsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport {useEffect, useState} from 'react'\nimport {initialQueryState, KTIcon, useDebounce} from '../../../../../../../_metronic/helpers'\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\n\nconst UsersListSearchComponent = () => {\n  const {updateState} = useQueryRequest()\n  const [searchTerm, setSearchTerm] = useState<string>('')\n  // Debounce search term so that it only gives us latest value ...\n  // ... if searchTerm has not been updated within last 500ms.\n  // The goal is to only have the API call fire when user stops typing ...\n  // ... so that we aren't hitting our API rapidly.\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\n  // Effect for API call\n  useEffect(\n    () => {\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\n      }\n    },\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\n    // More details about useDebounce: https://usehooks.com/useDebounce/\n  )\n\n  return (\n    <div className='card-title'>\n      {/* begin::Search */}\n      <div className='d-flex align-items-center position-relative my-1'>\n        <KTIcon iconName='magnifier' className='fs-1 position-absolute ms-6' />\n        <input\n          type='text'\n          data-kt-user-table-filter='search'\n          className='form-control form-control-solid w-250px ps-14'\n          placeholder='Search user'\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n      </div>\n      {/* end::Search */}\n    </div>\n  )\n}\n\nexport {UsersListSearchComponent}\n"],"mappings":";;AAAA;AACA,SAAQA,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACzC,SAAQC,iBAAiB,EAAEC,MAAM,EAAEC,WAAW,QAAO,wCAAwC;AAC7F,SAAQC,eAAe,QAAO,iCAAiC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/D,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrC,MAAM;IAACC;EAAW,CAAC,GAAGL,eAAe,CAAC,CAAC;EACvC,MAAM,CAACM,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAS,EAAE,CAAC;EACxD;EACA;EACA;EACA;EACA,MAAMY,mBAAmB,GAAGT,WAAW,CAACO,UAAU,EAAE,GAAG,CAAC;EACxD;EACAX,SAAS,CACP,MAAM;IACJ,IAAIa,mBAAmB,KAAKC,SAAS,IAAIH,UAAU,KAAKG,SAAS,EAAE;MACjEJ,WAAW,CAAC;QAACK,MAAM,EAAEF,mBAAmB;QAAE,GAAGX;MAAiB,CAAC,CAAC;IAClE;EACF,CAAC,EACD,CAACW,mBAAmB,CAAC,CAAC;EACtB;EACF,CAAC;;EAED,oBACEN,OAAA;IAAKS,SAAS,EAAC,YAAY;IAAAC,QAAA,eAEzBV,OAAA;MAAKS,SAAS,EAAC,kDAAkD;MAAAC,QAAA,gBAC/DV,OAAA,CAACJ,MAAM;QAACe,QAAQ,EAAC,WAAW;QAACF,SAAS,EAAC;MAA6B;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACvEf,OAAA;QACEgB,IAAI,EAAC,MAAM;QACX,6BAA0B,QAAQ;QAClCP,SAAS,EAAC,+CAA+C;QACzDQ,WAAW,EAAC,aAAa;QACzBC,KAAK,EAAEd,UAAW;QAClBe,QAAQ,EAAGC,CAAC,IAAKf,aAAa,CAACe,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEH,CAAC;AAEV,CAAC;AAAAb,EAAA,CApCKD,wBAAwB;EAAA,QACNH,eAAe,EAMTD,WAAW;AAAA;AAAAyB,EAAA,GAPnCrB,wBAAwB;AAsC9B,SAAQA,wBAAwB;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}