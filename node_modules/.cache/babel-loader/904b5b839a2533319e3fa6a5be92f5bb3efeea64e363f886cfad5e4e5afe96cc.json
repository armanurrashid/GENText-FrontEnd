{"ast":null,"code":"var _jsxFileName = \"E:\\\\GENText\\\\src\\\\_metronic\\\\helpers\\\\components\\\\KTIcon.tsx\";\nimport React from 'react';\nimport icons from '../icons-config/icons';\nimport { getLayoutFromLocalStorage } from '../../layout/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KTIcon = _ref => {\n  let {\n    className = '',\n    iconType,\n    iconName\n  } = _ref;\n  if (!iconType) {\n    var _getLayoutFromLocalSt;\n    iconType = (_getLayoutFromLocalSt = getLayoutFromLocalStorage().main) === null || _getLayoutFromLocalSt === void 0 ? void 0 : _getLayoutFromLocalSt.iconType;\n  }\n  return /*#__PURE__*/_jsxDEV(\"i\", {\n    className: `ki-${iconType} ki-${iconName}${className && ' ' + className}`,\n    children: iconType === 'duotone' && [...Array(icons[iconName])].map((e, i) => {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `path${i + 1}`\n      }, `${iconType}-${iconName}-${className}-path-${i + 1}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_c = KTIcon;\nexport { KTIcon };\nvar _c;\n$RefreshReg$(_c, \"KTIcon\");","map":{"version":3,"names":["React","icons","getLayoutFromLocalStorage","jsxDEV","_jsxDEV","KTIcon","_ref","className","iconType","iconName","_getLayoutFromLocalSt","main","children","Array","map","e","i","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/GENText/src/_metronic/helpers/components/KTIcon.tsx"],"sourcesContent":["import React from 'react'\nimport icons from '../icons-config/icons'\nimport {getLayoutFromLocalStorage} from '../../layout/core'\n\ntype Props = {\n  className?: string\n  iconType?: 'duotone' | 'solid' | 'outline'\n  iconName: string\n}\n\nconst KTIcon: React.FC<Props> = ({className = '', iconType, iconName}) => {\n  if (!iconType) {\n    iconType = getLayoutFromLocalStorage().main?.iconType\n  }\n\n  return (\n    <i className={`ki-${iconType} ki-${iconName}${className && ' ' + className}`}>\n      {iconType === 'duotone' &&\n        [...Array(icons[iconName])].map((e, i) => {\n          return (\n            <span\n              key={`${iconType}-${iconName}-${className}-path-${i + 1}`}\n              className={`path${i + 1}`}\n            ></span>\n          )\n        })}\n    </i>\n  )\n}\n\nexport {KTIcon}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,uBAAuB;AACzC,SAAQC,yBAAyB,QAAO,mBAAmB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAQ3D,MAAMC,MAAuB,GAAGC,IAAA,IAA0C;EAAA,IAAzC;IAACC,SAAS,GAAG,EAAE;IAAEC,QAAQ;IAAEC;EAAQ,CAAC,GAAAH,IAAA;EACnE,IAAI,CAACE,QAAQ,EAAE;IAAA,IAAAE,qBAAA;IACbF,QAAQ,IAAAE,qBAAA,GAAGR,yBAAyB,CAAC,CAAC,CAACS,IAAI,cAAAD,qBAAA,uBAAhCA,qBAAA,CAAkCF,QAAQ;EACvD;EAEA,oBACEJ,OAAA;IAAGG,SAAS,EAAG,MAAKC,QAAS,OAAMC,QAAS,GAAEF,SAAS,IAAI,GAAG,GAAGA,SAAU,EAAE;IAAAK,QAAA,EAC1EJ,QAAQ,KAAK,SAAS,IACrB,CAAC,GAAGK,KAAK,CAACZ,KAAK,CAACQ,QAAQ,CAAC,CAAC,CAAC,CAACK,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACxC,oBACEZ,OAAA;QAEEG,SAAS,EAAG,OAAMS,CAAC,GAAG,CAAE;MAAE,GADpB,GAAER,QAAS,IAAGC,QAAS,IAAGF,SAAU,SAAQS,CAAC,GAAG,CAAE,EAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEpD,CAAC;IAEZ,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAER,CAAC;AAAAC,EAAA,GAlBKhB,MAAuB;AAoB7B,SAAQA,MAAM;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}