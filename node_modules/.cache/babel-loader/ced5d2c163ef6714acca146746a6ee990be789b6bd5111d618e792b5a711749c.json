{"ast":null,"code":"var _jsxFileName = \"E:\\\\tappware Task\\\\react app\\\\GENText-FrontEnd\\\\src\\\\app\\\\modules\\\\apps\\\\user-management\\\\users-list\\\\core\\\\ListViewProvider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, createContext, useContext, useMemo } from 'react';\nimport { calculatedGroupingIsDisabled, calculateIsAllDataSelected, groupingOnSelect, initialListView, groupingOnSelectAll } from '../../../../../../_metronic/helpers';\nimport { useQueryResponse, useQueryResponseData } from './QueryResponseProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListViewContext = /*#__PURE__*/createContext(initialListView);\nconst ListViewProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [selected, setSelected] = useState(initialListView.selected);\n  const [itemIdForUpdate, setItemIdForUpdate] = useState(initialListView.itemIdForUpdate);\n  const {\n    isLoading\n  } = useQueryResponse();\n  const data = useQueryResponseData();\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data]);\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected]);\n  return /*#__PURE__*/_jsxDEV(ListViewContext.Provider, {\n    value: {\n      selected,\n      itemIdForUpdate,\n      setItemIdForUpdate,\n      disabled,\n      isAllSelected,\n      onSelect: id => {\n        groupingOnSelect(id, selected, setSelected);\n      },\n      onSelectAll: () => {\n        groupingOnSelectAll(isAllSelected, setSelected, data);\n      },\n      clearSelected: () => {\n        setSelected([]);\n      }\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(ListViewProvider, \"7ZdpCKPsdfQoo58XDYstLbqkFgM=\", false, function () {\n  return [useQueryResponse, useQueryResponseData];\n});\n_c = ListViewProvider;\nconst useListView = () => {\n  _s2();\n  return useContext(ListViewContext);\n};\n_s2(useListView, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport { ListViewProvider, useListView };\nvar _c;\n$RefreshReg$(_c, \"ListViewProvider\");","map":{"version":3,"names":["useState","createContext","useContext","useMemo","calculatedGroupingIsDisabled","calculateIsAllDataSelected","groupingOnSelect","initialListView","groupingOnSelectAll","useQueryResponse","useQueryResponseData","jsxDEV","_jsxDEV","ListViewContext","ListViewProvider","_ref","_s","children","selected","setSelected","itemIdForUpdate","setItemIdForUpdate","isLoading","data","disabled","isAllSelected","Provider","value","onSelect","id","onSelectAll","clearSelected","fileName","_jsxFileName","lineNumber","columnNumber","_c","useListView","_s2","$RefreshReg$"],"sources":["E:/tappware Task/react app/GENText-FrontEnd/src/app/modules/apps/user-management/users-list/core/ListViewProvider.tsx"],"sourcesContent":["import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n  WithChildren,\r\n} from '../../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC<WithChildren> = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n"],"mappings":";;;AAAA,SAAYA,QAAQ,EAAEC,aAAa,EAAEC,UAAU,EAAEC,OAAO,QAAO,OAAO;AACtE,SAEEC,4BAA4B,EAC5BC,0BAA0B,EAC1BC,gBAAgB,EAChBC,eAAe,EAEfC,mBAAmB,QAEd,qCAAqC;AAC5C,SAAQC,gBAAgB,EAAEC,oBAAoB,QAAO,yBAAyB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,eAAe,gBAAGZ,aAAa,CAAuBM,eAAe,CAAC;AAE5E,MAAMO,gBAAkC,GAAGC,IAAA,IAAgB;EAAAC,EAAA;EAAA,IAAf;IAACC;EAAQ,CAAC,GAAAF,IAAA;EACpD,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAYO,eAAe,CAACW,QAAQ,CAAC;EAC7E,MAAM,CAACE,eAAe,EAAEC,kBAAkB,CAAC,GAAGrB,QAAQ,CAAKO,eAAe,CAACa,eAAe,CAAC;EAC3F,MAAM;IAACE;EAAS,CAAC,GAAGb,gBAAgB,CAAC,CAAC;EACtC,MAAMc,IAAI,GAAGb,oBAAoB,CAAC,CAAC;EACnC,MAAMc,QAAQ,GAAGrB,OAAO,CAAC,MAAMC,4BAA4B,CAACkB,SAAS,EAAEC,IAAI,CAAC,EAAE,CAACD,SAAS,EAAEC,IAAI,CAAC,CAAC;EAChG,MAAME,aAAa,GAAGtB,OAAO,CAAC,MAAME,0BAA0B,CAACkB,IAAI,EAAEL,QAAQ,CAAC,EAAE,CAACK,IAAI,EAAEL,QAAQ,CAAC,CAAC;EAEjG,oBACEN,OAAA,CAACC,eAAe,CAACa,QAAQ;IACvBC,KAAK,EAAE;MACLT,QAAQ;MACRE,eAAe;MACfC,kBAAkB;MAClBG,QAAQ;MACRC,aAAa;MACbG,QAAQ,EAAGC,EAAM,IAAK;QACpBvB,gBAAgB,CAACuB,EAAE,EAAEX,QAAQ,EAAEC,WAAW,CAAC;MAC7C,CAAC;MACDW,WAAW,EAAEA,CAAA,KAAM;QACjBtB,mBAAmB,CAACiB,aAAa,EAAEN,WAAW,EAAEI,IAAI,CAAC;MACvD,CAAC;MACDQ,aAAa,EAAEA,CAAA,KAAM;QACnBZ,WAAW,CAAC,EAAE,CAAC;MACjB;IACF,CAAE;IAAAF,QAAA,EAEDA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAAAnB,EAAA,CA9BKF,gBAAkC;EAAA,QAGlBL,gBAAgB,EACvBC,oBAAoB;AAAA;AAAA0B,EAAA,GAJ7BtB,gBAAkC;AAgCxC,MAAMuB,WAAW,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMpC,UAAU,CAACW,eAAe,CAAC;AAAA;AAAAyB,GAAA,CAA/CD,WAAW;AAEjB,SAAQvB,gBAAgB,EAAEuB,WAAW;AAAC,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}