{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PartitionRelativeTimePattern = void 0;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar SingularRelativeTimeUnit_1 = require(\"./SingularRelativeTimeUnit\");\nvar MakePartsList_1 = require(\"./MakePartsList\");\nfunction PartitionRelativeTimePattern(rtf, value, unit, _a) {\n  var getInternalSlots = _a.getInternalSlots;\n  (0, ecma402_abstract_1.invariant)((0, ecma402_abstract_1.Type)(value) === 'Number', \"value must be number, instead got \".concat(typeof value), TypeError);\n  (0, ecma402_abstract_1.invariant)((0, ecma402_abstract_1.Type)(unit) === 'String', \"unit must be number, instead got \".concat(typeof value), TypeError);\n  if (isNaN(value) || !isFinite(value)) {\n    throw new RangeError(\"Invalid value \".concat(value));\n  }\n  var resolvedUnit = (0, SingularRelativeTimeUnit_1.SingularRelativeTimeUnit)(unit);\n  var _b = getInternalSlots(rtf),\n    fields = _b.fields,\n    style = _b.style,\n    numeric = _b.numeric,\n    pluralRules = _b.pluralRules,\n    numberFormat = _b.numberFormat;\n  var entry = resolvedUnit;\n  if (style === 'short') {\n    entry = \"\".concat(resolvedUnit, \"-short\");\n  } else if (style === 'narrow') {\n    entry = \"\".concat(resolvedUnit, \"-narrow\");\n  }\n  if (!(entry in fields)) {\n    entry = resolvedUnit;\n  }\n  var patterns = fields[entry];\n  if (numeric === 'auto') {\n    if ((0, ecma402_abstract_1.ToString)(value) in patterns) {\n      return [{\n        type: 'literal',\n        value: patterns[(0, ecma402_abstract_1.ToString)(value)]\n      }];\n    }\n  }\n  var tl = 'future';\n  if ((0, ecma402_abstract_1.SameValue)(value, -0) || value < 0) {\n    tl = 'past';\n  }\n  var po = patterns[tl];\n  var fv = typeof numberFormat.formatToParts === 'function' ? numberFormat.formatToParts(Math.abs(value)) :\n  // TODO: If formatToParts is not supported, we assume the whole formatted\n  // number is a part\n  [{\n    type: 'literal',\n    value: numberFormat.format(Math.abs(value)),\n    unit: unit\n  }];\n  var pr = pluralRules.select(value);\n  var pattern = po[pr];\n  return (0, MakePartsList_1.MakePartsList)(pattern, resolvedUnit, fv);\n}\nexports.PartitionRelativeTimePattern = PartitionRelativeTimePattern;","map":{"version":3,"names":["Object","defineProperty","exports","value","PartitionRelativeTimePattern","ecma402_abstract_1","require","SingularRelativeTimeUnit_1","MakePartsList_1","rtf","unit","_a","getInternalSlots","invariant","Type","concat","TypeError","isNaN","isFinite","RangeError","resolvedUnit","SingularRelativeTimeUnit","_b","fields","style","numeric","pluralRules","numberFormat","entry","patterns","ToString","type","tl","SameValue","po","fv","formatToParts","Math","abs","format","pr","select","pattern","MakePartsList"],"sources":["E:/tappware Task/react app/GENText-FrontEnd/node_modules/@formatjs/intl-relativetimeformat/abstract/PartitionRelativeTimePattern.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PartitionRelativeTimePattern = void 0;\r\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\r\nvar SingularRelativeTimeUnit_1 = require(\"./SingularRelativeTimeUnit\");\r\nvar MakePartsList_1 = require(\"./MakePartsList\");\r\nfunction PartitionRelativeTimePattern(rtf, value, unit, _a) {\r\n    var getInternalSlots = _a.getInternalSlots;\r\n    (0, ecma402_abstract_1.invariant)((0, ecma402_abstract_1.Type)(value) === 'Number', \"value must be number, instead got \".concat(typeof value), TypeError);\r\n    (0, ecma402_abstract_1.invariant)((0, ecma402_abstract_1.Type)(unit) === 'String', \"unit must be number, instead got \".concat(typeof value), TypeError);\r\n    if (isNaN(value) || !isFinite(value)) {\r\n        throw new RangeError(\"Invalid value \".concat(value));\r\n    }\r\n    var resolvedUnit = (0, SingularRelativeTimeUnit_1.SingularRelativeTimeUnit)(unit);\r\n    var _b = getInternalSlots(rtf), fields = _b.fields, style = _b.style, numeric = _b.numeric, pluralRules = _b.pluralRules, numberFormat = _b.numberFormat;\r\n    var entry = resolvedUnit;\r\n    if (style === 'short') {\r\n        entry = \"\".concat(resolvedUnit, \"-short\");\r\n    }\r\n    else if (style === 'narrow') {\r\n        entry = \"\".concat(resolvedUnit, \"-narrow\");\r\n    }\r\n    if (!(entry in fields)) {\r\n        entry = resolvedUnit;\r\n    }\r\n    var patterns = fields[entry];\r\n    if (numeric === 'auto') {\r\n        if ((0, ecma402_abstract_1.ToString)(value) in patterns) {\r\n            return [\r\n                {\r\n                    type: 'literal',\r\n                    value: patterns[(0, ecma402_abstract_1.ToString)(value)],\r\n                },\r\n            ];\r\n        }\r\n    }\r\n    var tl = 'future';\r\n    if ((0, ecma402_abstract_1.SameValue)(value, -0) || value < 0) {\r\n        tl = 'past';\r\n    }\r\n    var po = patterns[tl];\r\n    var fv = typeof numberFormat.formatToParts === 'function'\r\n        ? numberFormat.formatToParts(Math.abs(value))\r\n        : // TODO: If formatToParts is not supported, we assume the whole formatted\r\n            // number is a part\r\n            [\r\n                {\r\n                    type: 'literal',\r\n                    value: numberFormat.format(Math.abs(value)),\r\n                    unit: unit,\r\n                },\r\n            ];\r\n    var pr = pluralRules.select(value);\r\n    var pattern = po[pr];\r\n    return (0, MakePartsList_1.MakePartsList)(pattern, resolvedUnit, fv);\r\n}\r\nexports.PartitionRelativeTimePattern = PartitionRelativeTimePattern;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}