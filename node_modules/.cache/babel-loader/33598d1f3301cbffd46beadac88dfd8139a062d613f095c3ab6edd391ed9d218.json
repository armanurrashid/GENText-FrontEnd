{"ast":null,"code":"export const initialQueryState = {\n  page: 1,\n  items_per_page: 10\n};\nexport const initialQueryRequest = {\n  state: initialQueryState,\n  updateState: () => {}\n};\nexport const initialQueryResponse = {\n  refetch: () => {},\n  isLoading: false,\n  query: ''\n};\nexport const initialListView = {\n  selected: [],\n  onSelect: () => {},\n  onSelectAll: () => {},\n  clearSelected: () => {},\n  setItemIdForUpdate: () => {},\n  isAllSelected: false,\n  disabled: false\n};","map":{"version":3,"names":["initialQueryState","page","items_per_page","initialQueryRequest","state","updateState","initialQueryResponse","refetch","isLoading","query","initialListView","selected","onSelect","onSelectAll","clearSelected","setItemIdForUpdate","isAllSelected","disabled"],"sources":["E:/tappware Task/react app/GENText-FrontEnd/src/_metronic/helpers/crud-helper/models.ts"],"sourcesContent":["import {Dispatch, SetStateAction} from 'react'\r\n\r\nexport type ID = undefined | null | number\r\n\r\nexport type PaginationState = {\r\n  page: number\r\n  items_per_page: 10 | 30 | 50 | 100\r\n  links?: Array<{label: string; active: boolean; url: string | null; page: number | null}>\r\n}\r\n\r\nexport type SortState = {\r\n  sort?: string\r\n  order?: 'asc' | 'desc'\r\n}\r\n\r\nexport type FilterState = {\r\n  filter?: unknown\r\n}\r\n\r\nexport type SearchState = {\r\n  search?: string\r\n}\r\n\r\nexport type Response<T> = {\r\n  data?: T\r\n  payload?: {\r\n    message?: string\r\n    errors?: {\r\n      [key: string]: Array<string>\r\n    }\r\n    pagination?: PaginationState\r\n  }\r\n}\r\n\r\nexport type QueryState = PaginationState & SortState & FilterState & SearchState\r\n\r\nexport type QueryRequestContextProps = {\r\n  state: QueryState\r\n  updateState: (updates: Partial<QueryState>) => void\r\n}\r\n\r\nexport const initialQueryState: QueryState = {\r\n  page: 1,\r\n  items_per_page: 10,\r\n}\r\n\r\nexport const initialQueryRequest: QueryRequestContextProps = {\r\n  state: initialQueryState,\r\n  updateState: () => {},\r\n}\r\n\r\nexport type QueryResponseContextProps<T> = {\r\n  response?: Response<Array<T>> | undefined\r\n  refetch: () => void\r\n  isLoading: boolean\r\n  query: string\r\n}\r\n\r\nexport const initialQueryResponse = {refetch: () => {}, isLoading: false, query: ''}\r\n\r\nexport type ListViewContextProps = {\r\n  selected: Array<ID>\r\n  onSelect: (selectedId: ID) => void\r\n  onSelectAll: () => void\r\n  clearSelected: () => void\r\n  // NULL => (CREATION MODE) | MODAL IS OPENED\r\n  // NUMBER => (EDIT MODE) | MODAL IS OPENED\r\n  // UNDEFINED => MODAL IS CLOSED\r\n  itemIdForUpdate?: ID\r\n  setItemIdForUpdate: Dispatch<SetStateAction<ID>>\r\n  isAllSelected: boolean\r\n  disabled: boolean\r\n}\r\n\r\nexport const initialListView: ListViewContextProps = {\r\n  selected: [],\r\n  onSelect: () => {},\r\n  onSelectAll: () => {},\r\n  clearSelected: () => {},\r\n  setItemIdForUpdate: () => {},\r\n  isAllSelected: false,\r\n  disabled: false,\r\n}\r\n"],"mappings":"AAyCA,OAAO,MAAMA,iBAA6B,GAAG;EAC3CC,IAAI,EAAE,CAAC;EACPC,cAAc,EAAE;AAClB,CAAC;AAED,OAAO,MAAMC,mBAA6C,GAAG;EAC3DC,KAAK,EAAEJ,iBAAiB;EACxBK,WAAW,EAAEA,CAAA,KAAM,CAAC;AACtB,CAAC;AASD,OAAO,MAAMC,oBAAoB,GAAG;EAACC,OAAO,EAAEA,CAAA,KAAM,CAAC,CAAC;EAAEC,SAAS,EAAE,KAAK;EAAEC,KAAK,EAAE;AAAE,CAAC;AAgBpF,OAAO,MAAMC,eAAqC,GAAG;EACnDC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAEA,CAAA,KAAM,CAAC,CAAC;EAClBC,WAAW,EAAEA,CAAA,KAAM,CAAC,CAAC;EACrBC,aAAa,EAAEA,CAAA,KAAM,CAAC,CAAC;EACvBC,kBAAkB,EAAEA,CAAA,KAAM,CAAC,CAAC;EAC5BC,aAAa,EAAE,KAAK;EACpBC,QAAQ,EAAE;AACZ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}