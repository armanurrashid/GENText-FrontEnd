{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { createFormatters, DEFAULT_INTL_CONFIG } from './utils';\nimport { InvalidConfigError, MissingDataError } from './error';\nimport { formatNumber, formatNumberToParts } from './number';\nimport { formatRelativeTime } from './relativeTime';\nimport { formatDate, formatDateToParts, formatTime, formatTimeToParts, formatDateTimeRange } from './dateTime';\nimport { formatPlural } from './plural';\nimport { formatMessage } from './message';\nimport { formatList, formatListToParts } from './list';\nimport { formatDisplayName } from './displayName';\nfunction messagesContainString(messages) {\n  var firstMessage = messages ? messages[Object.keys(messages)[0]] : undefined;\n  return typeof firstMessage === 'string';\n}\nfunction verifyConfigMessages(config) {\n  if (config.onWarn && config.defaultRichTextElements && messagesContainString(config.messages || {})) {\n    config.onWarn(\"[@formatjs/intl] \\\"defaultRichTextElements\\\" was specified but \\\"message\\\" was not pre-compiled. \\nPlease consider using \\\"@formatjs/cli\\\" to pre-compile your messages for performance.\\nFor more details see https://formatjs.io/docs/getting-started/message-distribution\");\n  }\n}\n/**\r\n * Create intl object\r\n * @param config intl config\r\n * @param cache cache for formatter instances to prevent memory leak\r\n */\nexport function createIntl(config, cache) {\n  var formatters = createFormatters(cache);\n  var resolvedConfig = __assign(__assign({}, DEFAULT_INTL_CONFIG), config);\n  var locale = resolvedConfig.locale,\n    defaultLocale = resolvedConfig.defaultLocale,\n    onError = resolvedConfig.onError;\n  if (!locale) {\n    if (onError) {\n      onError(new InvalidConfigError(\"\\\"locale\\\" was not configured, using \\\"\".concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details\")));\n    }\n    // Since there's no registered locale data for `locale`, this will\n    // fallback to the `defaultLocale` to make sure things can render.\n    // The `messages` are overridden to the `defaultProps` empty object\n    // to maintain referential equality across re-renders. It's assumed\n    // each <FormattedMessage> contains a `defaultMessage` prop.\n    resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\n  } else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {\n    onError(new MissingDataError(\"Missing locale data for locale: \\\"\".concat(locale, \"\\\" in Intl.NumberFormat. Using default locale: \\\"\").concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\")));\n  } else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length && onError) {\n    onError(new MissingDataError(\"Missing locale data for locale: \\\"\".concat(locale, \"\\\" in Intl.DateTimeFormat. Using default locale: \\\"\").concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\")));\n  }\n  verifyConfigMessages(resolvedConfig);\n  return __assign(__assign({}, resolvedConfig), {\n    formatters: formatters,\n    formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat),\n    formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat),\n    formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat),\n    formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatDateTimeRange: formatDateTimeRange.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules),\n    // @ts-expect-error TODO: will get to this later\n    formatMessage: formatMessage.bind(null, resolvedConfig, formatters),\n    // @ts-expect-error TODO: will get to this later\n    $t: formatMessage.bind(null, resolvedConfig, formatters),\n    formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat),\n    formatListToParts: formatListToParts.bind(null, resolvedConfig, formatters.getListFormat),\n    formatDisplayName: formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames)\n  });\n}","map":{"version":3,"names":["__assign","createFormatters","DEFAULT_INTL_CONFIG","InvalidConfigError","MissingDataError","formatNumber","formatNumberToParts","formatRelativeTime","formatDate","formatDateToParts","formatTime","formatTimeToParts","formatDateTimeRange","formatPlural","formatMessage","formatList","formatListToParts","formatDisplayName","messagesContainString","messages","firstMessage","Object","keys","undefined","verifyConfigMessages","config","onWarn","defaultRichTextElements","createIntl","cache","formatters","resolvedConfig","locale","defaultLocale","onError","concat","Intl","NumberFormat","supportedLocalesOf","length","DateTimeFormat","bind","getNumberFormat","getRelativeTimeFormat","getDateTimeFormat","getPluralRules","$t","getListFormat","getDisplayNames"],"sources":["E:/tappware Task/react app/GENText-FrontEnd/node_modules/@formatjs/intl/lib/src/create-intl.js"],"sourcesContent":["import { __assign } from \"tslib\";\r\nimport { createFormatters, DEFAULT_INTL_CONFIG } from './utils';\r\nimport { InvalidConfigError, MissingDataError } from './error';\r\nimport { formatNumber, formatNumberToParts } from './number';\r\nimport { formatRelativeTime } from './relativeTime';\r\nimport { formatDate, formatDateToParts, formatTime, formatTimeToParts, formatDateTimeRange, } from './dateTime';\r\nimport { formatPlural } from './plural';\r\nimport { formatMessage } from './message';\r\nimport { formatList, formatListToParts } from './list';\r\nimport { formatDisplayName } from './displayName';\r\nfunction messagesContainString(messages) {\r\n    var firstMessage = messages ? messages[Object.keys(messages)[0]] : undefined;\r\n    return typeof firstMessage === 'string';\r\n}\r\nfunction verifyConfigMessages(config) {\r\n    if (config.onWarn &&\r\n        config.defaultRichTextElements &&\r\n        messagesContainString(config.messages || {})) {\r\n        config.onWarn(\"[@formatjs/intl] \\\"defaultRichTextElements\\\" was specified but \\\"message\\\" was not pre-compiled. \\nPlease consider using \\\"@formatjs/cli\\\" to pre-compile your messages for performance.\\nFor more details see https://formatjs.io/docs/getting-started/message-distribution\");\r\n    }\r\n}\r\n/**\r\n * Create intl object\r\n * @param config intl config\r\n * @param cache cache for formatter instances to prevent memory leak\r\n */\r\nexport function createIntl(config, cache) {\r\n    var formatters = createFormatters(cache);\r\n    var resolvedConfig = __assign(__assign({}, DEFAULT_INTL_CONFIG), config);\r\n    var locale = resolvedConfig.locale, defaultLocale = resolvedConfig.defaultLocale, onError = resolvedConfig.onError;\r\n    if (!locale) {\r\n        if (onError) {\r\n            onError(new InvalidConfigError(\"\\\"locale\\\" was not configured, using \\\"\".concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details\")));\r\n        }\r\n        // Since there's no registered locale data for `locale`, this will\r\n        // fallback to the `defaultLocale` to make sure things can render.\r\n        // The `messages` are overridden to the `defaultProps` empty object\r\n        // to maintain referential equality across re-renders. It's assumed\r\n        // each <FormattedMessage> contains a `defaultMessage` prop.\r\n        resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\r\n    }\r\n    else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {\r\n        onError(new MissingDataError(\"Missing locale data for locale: \\\"\".concat(locale, \"\\\" in Intl.NumberFormat. Using default locale: \\\"\").concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\")));\r\n    }\r\n    else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length &&\r\n        onError) {\r\n        onError(new MissingDataError(\"Missing locale data for locale: \\\"\".concat(locale, \"\\\" in Intl.DateTimeFormat. Using default locale: \\\"\").concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\")));\r\n    }\r\n    verifyConfigMessages(resolvedConfig);\r\n    return __assign(__assign({}, resolvedConfig), { formatters: formatters, formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat), formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat), formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat), formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateTimeRange: formatDateTimeRange.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules), \r\n        // @ts-expect-error TODO: will get to this later\r\n        formatMessage: formatMessage.bind(null, resolvedConfig, formatters), \r\n        // @ts-expect-error TODO: will get to this later\r\n        $t: formatMessage.bind(null, resolvedConfig, formatters), formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat), formatListToParts: formatListToParts.bind(null, resolvedConfig, formatters.getListFormat), formatDisplayName: formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames) });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}