{"ast":null,"code":"var _jsxFileName = \"E:\\\\tappware Task\\\\react app\\\\GENText-FrontEnd\\\\src\\\\_metronic\\\\layout\\\\core\\\\_LayoutProvider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { DefaultConfig } from './_LayoutConfig';\nimport { setLayoutIntoLocalStorage, getEmptyCssClasses, getEmptyCSSVariables, getEmptyHTMLAttributes, LayoutSetup } from './_LayoutSetup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LayoutContext = /*#__PURE__*/createContext({\n  config: DefaultConfig,\n  classes: getEmptyCssClasses(),\n  attributes: getEmptyHTMLAttributes(),\n  cssVariables: getEmptyCSSVariables(),\n  setLayout: config => {},\n  setLayoutType: layoutType => {},\n  setToolbarType: toolbarType => {}\n});\nconst enableSplashScreen = () => {\n  const splashScreen = document.getElementById('splash-screen');\n  if (splashScreen) {\n    splashScreen.style.setProperty('display', 'flex');\n  }\n};\nconst disableSplashScreen = () => {\n  const splashScreen = document.getElementById('splash-screen');\n  if (splashScreen) {\n    splashScreen.style.setProperty('display', 'none');\n  }\n};\nconst LayoutProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [config, setConfig] = useState(LayoutSetup.config);\n  const [classes, setClasses] = useState(LayoutSetup.classes);\n  const [attributes, setAttributes] = useState(LayoutSetup.attributes);\n  const [cssVariables, setCSSVariables] = useState(LayoutSetup.cssVariables);\n  const setLayout = _themeConfig => {\n    enableSplashScreen();\n    const bodyClasses = Array.from(document.body.classList);\n    bodyClasses.forEach(cl => document.body.classList.remove(cl));\n    const updatedConfig = LayoutSetup.updatePartialConfig(_themeConfig);\n    setConfig(Object.assign({}, updatedConfig));\n    setClasses(LayoutSetup.classes);\n    setAttributes(LayoutSetup.attributes);\n    setCSSVariables(LayoutSetup.cssVariables);\n    setTimeout(() => {\n      disableSplashScreen();\n    }, 500);\n  };\n  const setToolbarType = toolbarType => {\n    var _updatedConfig$app;\n    const updatedConfig = {\n      ...config\n    };\n    if ((_updatedConfig$app = updatedConfig.app) !== null && _updatedConfig$app !== void 0 && _updatedConfig$app.toolbar) {\n      updatedConfig.app.toolbar.layout = toolbarType;\n    }\n    setLayoutIntoLocalStorage(updatedConfig);\n    window.location.reload();\n  };\n  const setLayoutType = layoutType => {\n    const updatedLayout = {\n      ...config,\n      layoutType\n    };\n    setLayoutIntoLocalStorage(updatedLayout);\n    window.location.reload();\n  };\n  const value = {\n    config,\n    classes,\n    attributes,\n    cssVariables,\n    setLayout,\n    setLayoutType,\n    setToolbarType\n  };\n  useEffect(() => {\n    disableSplashScreen();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LayoutContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 10\n  }, this);\n};\n_s(LayoutProvider, \"v9W/VJPDsgTcdQRHrWCbNvCfFmk=\");\n_c = LayoutProvider;\nexport { LayoutContext, LayoutProvider };\nexport function useLayout() {\n  _s2();\n  return useContext(LayoutContext);\n}\n_s2(useLayout, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"LayoutProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","DefaultConfig","setLayoutIntoLocalStorage","getEmptyCssClasses","getEmptyCSSVariables","getEmptyHTMLAttributes","LayoutSetup","jsxDEV","_jsxDEV","LayoutContext","config","classes","attributes","cssVariables","setLayout","setLayoutType","layoutType","setToolbarType","toolbarType","enableSplashScreen","splashScreen","document","getElementById","style","setProperty","disableSplashScreen","LayoutProvider","_ref","_s","children","setConfig","setClasses","setAttributes","setCSSVariables","_themeConfig","bodyClasses","Array","from","body","classList","forEach","cl","remove","updatedConfig","updatePartialConfig","Object","assign","setTimeout","_updatedConfig$app","app","toolbar","layout","window","location","reload","updatedLayout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useLayout","_s2","$RefreshReg$"],"sources":["E:/tappware Task/react app/GENText-FrontEnd/src/_metronic/layout/core/_LayoutProvider.tsx"],"sourcesContent":["import {FC, createContext, useContext, useState, useEffect} from 'react'\r\nimport {DefaultConfig} from './_LayoutConfig'\r\nimport {\r\n  setLayoutIntoLocalStorage,\r\n  getEmptyCssClasses,\r\n  getEmptyCSSVariables,\r\n  getEmptyHTMLAttributes,\r\n  LayoutSetup,\r\n} from './_LayoutSetup'\r\nimport {\r\n  ILayout,\r\n  ILayoutCSSVariables,\r\n  ILayoutCSSClasses,\r\n  ILayoutHTMLAttributes,\r\n  LayoutType,\r\n  ToolbarType,\r\n} from './_Models'\r\nimport {WithChildren} from '../../helpers'\r\n\r\nexport interface LayoutContextModel {\r\n  config: ILayout\r\n  classes: ILayoutCSSClasses\r\n  attributes: ILayoutHTMLAttributes\r\n  cssVariables: ILayoutCSSVariables\r\n  setLayout: (config: LayoutSetup) => void\r\n  setLayoutType: (layoutType: LayoutType) => void\r\n  setToolbarType: (toolbarType: ToolbarType) => void\r\n}\r\n\r\nconst LayoutContext = createContext<LayoutContextModel>({\r\n  config: DefaultConfig,\r\n  classes: getEmptyCssClasses(),\r\n  attributes: getEmptyHTMLAttributes(),\r\n  cssVariables: getEmptyCSSVariables(),\r\n  setLayout: (config: LayoutSetup) => {},\r\n  setLayoutType: (layoutType: LayoutType) => {},\r\n  setToolbarType: (toolbarType: ToolbarType) => {},\r\n})\r\n\r\nconst enableSplashScreen = () => {\r\n  const splashScreen = document.getElementById('splash-screen')\r\n  if (splashScreen) {\r\n    splashScreen.style.setProperty('display', 'flex')\r\n  }\r\n}\r\n\r\nconst disableSplashScreen = () => {\r\n  const splashScreen = document.getElementById('splash-screen')\r\n  if (splashScreen) {\r\n    splashScreen.style.setProperty('display', 'none')\r\n  }\r\n}\r\n\r\nconst LayoutProvider: FC<WithChildren> = ({children}) => {\r\n  const [config, setConfig] = useState(LayoutSetup.config)\r\n  const [classes, setClasses] = useState(LayoutSetup.classes)\r\n  const [attributes, setAttributes] = useState(LayoutSetup.attributes)\r\n  const [cssVariables, setCSSVariables] = useState(LayoutSetup.cssVariables)\r\n\r\n  const setLayout = (_themeConfig: Partial<ILayout>) => {\r\n    enableSplashScreen()\r\n    const bodyClasses = Array.from(document.body.classList)\r\n    bodyClasses.forEach((cl) => document.body.classList.remove(cl))\r\n    const updatedConfig = LayoutSetup.updatePartialConfig(_themeConfig)\r\n    setConfig(Object.assign({}, updatedConfig))\r\n    setClasses(LayoutSetup.classes)\r\n    setAttributes(LayoutSetup.attributes)\r\n    setCSSVariables(LayoutSetup.cssVariables)\r\n    setTimeout(() => {\r\n      disableSplashScreen()\r\n    }, 500)\r\n  }\r\n\r\n  const setToolbarType = (toolbarType: ToolbarType) => {\r\n    const updatedConfig = {...config}\r\n    if (updatedConfig.app?.toolbar) {\r\n      updatedConfig.app.toolbar.layout = toolbarType\r\n    }\r\n\r\n    setLayoutIntoLocalStorage(updatedConfig)\r\n    window.location.reload()\r\n  }\r\n\r\n  const setLayoutType = (layoutType: LayoutType) => {\r\n    const updatedLayout = {...config, layoutType}\r\n    setLayoutIntoLocalStorage(updatedLayout)\r\n    window.location.reload()\r\n  }\r\n\r\n  const value: LayoutContextModel = {\r\n    config,\r\n    classes,\r\n    attributes,\r\n    cssVariables,\r\n    setLayout,\r\n    setLayoutType,\r\n    setToolbarType,\r\n  }\r\n\r\n  useEffect(() => {\r\n    disableSplashScreen()\r\n  }, [])\r\n\r\n  return <LayoutContext.Provider value={value}>{children}</LayoutContext.Provider>\r\n}\r\n\r\nexport {LayoutContext, LayoutProvider}\r\n\r\nexport function useLayout() {\r\n  return useContext(LayoutContext)\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}