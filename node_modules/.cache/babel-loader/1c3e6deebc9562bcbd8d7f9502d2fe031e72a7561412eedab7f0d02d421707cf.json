{"ast":null,"code":"export class DataUtil {\n  static set(instance, key, data) {\n    if (!instance) {\n      return;\n    }\n    const instanceData = DataUtil.store.get(instance);\n    if (!instanceData) {\n      const newMap = new Map().set(key, data);\n      DataUtil.store.set(instance, newMap);\n      return;\n    }\n    instanceData.set(key, data);\n  }\n  static get(instance, key) {\n    const instanceData = DataUtil.store.get(instance);\n    if (!instanceData) {\n      return;\n    }\n    return instanceData.get(key);\n  }\n  static remove(instance, key) {\n    const instanceData = DataUtil.store.get(instance);\n    if (!instanceData) {\n      return;\n    }\n    instanceData.delete(key);\n  }\n  static removeOne(instance, key, eventId) {\n    const instanceData = DataUtil.store.get(instance);\n    if (!instanceData) {\n      return;\n    }\n    const eventsIds = instanceData.get(key);\n    if (!eventsIds) {\n      return;\n    }\n    const updateEventsIds = eventsIds.filter(f => f !== eventId);\n    DataUtil.set(instance, key, updateEventsIds);\n  }\n  static has(instance, key) {\n    const instanceData = DataUtil.store.get(instance);\n    if (instanceData) {\n      return instanceData.has(key);\n    }\n    return false;\n  }\n  static getAllInstancesByKey(key) {\n    const result = [];\n    DataUtil.store.forEach(val => {\n      val.forEach((v, k) => {\n        if (k === key) {\n          result.push(v);\n        }\n      });\n    });\n    return result;\n  }\n}\nDataUtil.store = new Map();","map":{"version":3,"names":["DataUtil","set","instance","key","data","instanceData","store","get","newMap","Map","remove","delete","removeOne","eventId","eventsIds","updateEventsIds","filter","f","has","getAllInstancesByKey","result","forEach","val","v","k","push"],"sources":["E:/tappware Task/react app/GENText-FrontEnd/src/_metronic/assets/ts/_utils/_DataUtil.ts"],"sourcesContent":["export class DataUtil {\r\n  static store: Map<HTMLElement, Map<string, unknown>> = new Map()\r\n\r\n  public static set(instance: HTMLElement | undefined, key: string, data: unknown): void {\r\n    if (!instance) {\r\n      return\r\n    }\r\n\r\n    const instanceData = DataUtil.store.get(instance)\r\n    if (!instanceData) {\r\n      const newMap = new Map().set(key, data)\r\n      DataUtil.store.set(instance, newMap)\r\n      return\r\n    }\r\n\r\n    instanceData.set(key, data)\r\n  }\r\n\r\n  public static get(instance: HTMLElement, key: string): unknown | undefined {\r\n    const instanceData = DataUtil.store.get(instance)\r\n    if (!instanceData) {\r\n      return\r\n    }\r\n\r\n    return instanceData.get(key)\r\n  }\r\n\r\n  public static remove(instance: HTMLElement, key: string): void {\r\n    const instanceData = DataUtil.store.get(instance)\r\n    if (!instanceData) {\r\n      return\r\n    }\r\n\r\n    instanceData.delete(key)\r\n  }\r\n\r\n  public static removeOne(instance: HTMLElement, key: string, eventId: string) {\r\n    const instanceData = DataUtil.store.get(instance)\r\n    if (!instanceData) {\r\n      return\r\n    }\r\n\r\n    const eventsIds = instanceData.get(key)\r\n    if (!eventsIds) {\r\n      return\r\n    }\r\n\r\n    const updateEventsIds = (eventsIds as string[]).filter((f) => f !== eventId)\r\n    DataUtil.set(instance, key, updateEventsIds)\r\n  }\r\n\r\n  public static has(instance: HTMLElement, key: string): boolean {\r\n    const instanceData = DataUtil.store.get(instance)\r\n    if (instanceData) {\r\n      return instanceData.has(key)\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  public static getAllInstancesByKey(key: string) {\r\n    const result: any[] = []\r\n    DataUtil.store.forEach((val) => {\r\n      val.forEach((v, k) => {\r\n        if (k === key) {\r\n          result.push(v)\r\n        }\r\n      })\r\n    })\r\n    return result\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,CAAC;EAGpB,OAAcC,GAAGA,CAACC,QAAiC,EAAEC,GAAW,EAAEC,IAAa,EAAQ;IACrF,IAAI,CAACF,QAAQ,EAAE;MACb;IACF;IAEA,MAAMG,YAAY,GAAGL,QAAQ,CAACM,KAAK,CAACC,GAAG,CAACL,QAAQ,CAAC;IACjD,IAAI,CAACG,YAAY,EAAE;MACjB,MAAMG,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC,CAACR,GAAG,CAACE,GAAG,EAAEC,IAAI,CAAC;MACvCJ,QAAQ,CAACM,KAAK,CAACL,GAAG,CAACC,QAAQ,EAAEM,MAAM,CAAC;MACpC;IACF;IAEAH,YAAY,CAACJ,GAAG,CAACE,GAAG,EAAEC,IAAI,CAAC;EAC7B;EAEA,OAAcG,GAAGA,CAACL,QAAqB,EAAEC,GAAW,EAAuB;IACzE,MAAME,YAAY,GAAGL,QAAQ,CAACM,KAAK,CAACC,GAAG,CAACL,QAAQ,CAAC;IACjD,IAAI,CAACG,YAAY,EAAE;MACjB;IACF;IAEA,OAAOA,YAAY,CAACE,GAAG,CAACJ,GAAG,CAAC;EAC9B;EAEA,OAAcO,MAAMA,CAACR,QAAqB,EAAEC,GAAW,EAAQ;IAC7D,MAAME,YAAY,GAAGL,QAAQ,CAACM,KAAK,CAACC,GAAG,CAACL,QAAQ,CAAC;IACjD,IAAI,CAACG,YAAY,EAAE;MACjB;IACF;IAEAA,YAAY,CAACM,MAAM,CAACR,GAAG,CAAC;EAC1B;EAEA,OAAcS,SAASA,CAACV,QAAqB,EAAEC,GAAW,EAAEU,OAAe,EAAE;IAC3E,MAAMR,YAAY,GAAGL,QAAQ,CAACM,KAAK,CAACC,GAAG,CAACL,QAAQ,CAAC;IACjD,IAAI,CAACG,YAAY,EAAE;MACjB;IACF;IAEA,MAAMS,SAAS,GAAGT,YAAY,CAACE,GAAG,CAACJ,GAAG,CAAC;IACvC,IAAI,CAACW,SAAS,EAAE;MACd;IACF;IAEA,MAAMC,eAAe,GAAID,SAAS,CAAcE,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKJ,OAAO,CAAC;IAC5Eb,QAAQ,CAACC,GAAG,CAACC,QAAQ,EAAEC,GAAG,EAAEY,eAAe,CAAC;EAC9C;EAEA,OAAcG,GAAGA,CAAChB,QAAqB,EAAEC,GAAW,EAAW;IAC7D,MAAME,YAAY,GAAGL,QAAQ,CAACM,KAAK,CAACC,GAAG,CAACL,QAAQ,CAAC;IACjD,IAAIG,YAAY,EAAE;MAChB,OAAOA,YAAY,CAACa,GAAG,CAACf,GAAG,CAAC;IAC9B;IAEA,OAAO,KAAK;EACd;EAEA,OAAcgB,oBAAoBA,CAAChB,GAAW,EAAE;IAC9C,MAAMiB,MAAa,GAAG,EAAE;IACxBpB,QAAQ,CAACM,KAAK,CAACe,OAAO,CAAEC,GAAG,IAAK;MAC9BA,GAAG,CAACD,OAAO,CAAC,CAACE,CAAC,EAAEC,CAAC,KAAK;QACpB,IAAIA,CAAC,KAAKrB,GAAG,EAAE;UACbiB,MAAM,CAACK,IAAI,CAACF,CAAC,CAAC;QAChB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOH,MAAM;EACf;AACF;AAvEapB,QAAQ,CACZM,KAAK,GAA2C,IAAIG,GAAG,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}