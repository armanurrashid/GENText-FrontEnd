{"ast":null,"code":"var _jsxFileName = \"E:\\\\GENText\\\\src\\\\app\\\\modules\\\\accounts\\\\components\\\\settings\\\\cards\\\\SignInMethod.tsx\",\n  _s = $RefreshSig$();\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useState } from 'react';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { updateEmail, updatePassword } from '../SettingsModel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emailFormValidationSchema = Yup.object().shape({\n  newEmail: Yup.string().email('Wrong email format').min(3, 'Minimum 3 symbols').max(50, 'Maximum 50 symbols').required('Email is required'),\n  confirmPassword: Yup.string().min(3, 'Minimum 3 symbols').max(50, 'Maximum 50 symbols').required('Password is required')\n});\nconst passwordFormValidationSchema = Yup.object().shape({\n  currentPassword: Yup.string().min(3, 'Minimum 3 symbols').max(50, 'Maximum 50 symbols').required('Password is required'),\n  newPassword: Yup.string().min(3, 'Minimum 3 symbols').max(50, 'Maximum 50 symbols').required('Password is required'),\n  passwordConfirmation: Yup.string().min(3, 'Minimum 3 symbols').max(50, 'Maximum 50 symbols').required('Password is required').oneOf([Yup.ref('newPassword')], 'Passwords must match')\n});\nconst SignInMethod = () => {\n  _s();\n  const [emailUpdateData, setEmailUpdateData] = useState(updateEmail);\n  const [passwordUpdateData, setPasswordUpdateData] = useState(updatePassword);\n  const [showEmailForm, setShowEmailForm] = useState(false);\n  const [showPasswordForm, setPasswordForm] = useState(false);\n  const [loading1, setLoading1] = useState(false);\n  const formik1 = useFormik({\n    initialValues: {\n      ...emailUpdateData\n    },\n    validationSchema: emailFormValidationSchema,\n    onSubmit: values => {\n      setLoading1(true);\n      setTimeout(values => {\n        setEmailUpdateData(values);\n        setLoading1(false);\n        setShowEmailForm(false);\n      }, 1000);\n    }\n  });\n  const [loading2, setLoading2] = useState(false);\n  const formik2 = useFormik({\n    initialValues: {\n      ...passwordUpdateData\n    },\n    validationSchema: passwordFormValidationSchema,\n    onSubmit: values => {\n      setLoading2(true);\n      setTimeout(values => {\n        setPasswordUpdateData(values);\n        setLoading2(false);\n        setPasswordForm(false);\n      }, 1000);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card mb-5 mb-xl-10\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(SignInMethod, \"r0mpNgALCycEP16iVCXXQvy1PNI=\", false, function () {\n  return [useFormik, useFormik];\n});\n_c = SignInMethod;\nexport { SignInMethod };\nvar _c;\n$RefreshReg$(_c, \"SignInMethod\");","map":{"version":3,"names":["React","useState","Yup","useFormik","updateEmail","updatePassword","jsxDEV","_jsxDEV","emailFormValidationSchema","object","shape","newEmail","string","email","min","max","required","confirmPassword","passwordFormValidationSchema","currentPassword","newPassword","passwordConfirmation","oneOf","ref","SignInMethod","_s","emailUpdateData","setEmailUpdateData","passwordUpdateData","setPasswordUpdateData","showEmailForm","setShowEmailForm","showPasswordForm","setPasswordForm","loading1","setLoading1","formik1","initialValues","validationSchema","onSubmit","values","setTimeout","loading2","setLoading2","formik2","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/GENText/src/app/modules/accounts/components/settings/cards/SignInMethod.tsx"],"sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {useState} from 'react'\nimport {KTIcon} from '../../../../../../_metronic/helpers'\nimport * as Yup from 'yup'\nimport {useFormik} from 'formik'\nimport {IUpdateEmail, IUpdatePassword, updateEmail, updatePassword} from '../SettingsModel'\n\nconst emailFormValidationSchema = Yup.object().shape({\n  newEmail: Yup.string()\n    .email('Wrong email format')\n    .min(3, 'Minimum 3 symbols')\n    .max(50, 'Maximum 50 symbols')\n    .required('Email is required'),\n  confirmPassword: Yup.string()\n    .min(3, 'Minimum 3 symbols')\n    .max(50, 'Maximum 50 symbols')\n    .required('Password is required'),\n})\n\nconst passwordFormValidationSchema = Yup.object().shape({\n  currentPassword: Yup.string()\n    .min(3, 'Minimum 3 symbols')\n    .max(50, 'Maximum 50 symbols')\n    .required('Password is required'),\n  newPassword: Yup.string()\n    .min(3, 'Minimum 3 symbols')\n    .max(50, 'Maximum 50 symbols')\n    .required('Password is required'),\n  passwordConfirmation: Yup.string()\n    .min(3, 'Minimum 3 symbols')\n    .max(50, 'Maximum 50 symbols')\n    .required('Password is required')\n    .oneOf([Yup.ref('newPassword')], 'Passwords must match'),\n})\n\nconst SignInMethod: React.FC = () => {\n  const [emailUpdateData, setEmailUpdateData] = useState<IUpdateEmail>(updateEmail)\n  const [passwordUpdateData, setPasswordUpdateData] = useState<IUpdatePassword>(updatePassword)\n\n  const [showEmailForm, setShowEmailForm] = useState<boolean>(false)\n  const [showPasswordForm, setPasswordForm] = useState<boolean>(false)\n\n  const [loading1, setLoading1] = useState(false)\n\n  const formik1 = useFormik<IUpdateEmail>({\n    initialValues: {\n      ...emailUpdateData,\n    },\n    validationSchema: emailFormValidationSchema,\n    onSubmit: (values) => {\n      setLoading1(true)\n      setTimeout((values) => {\n        setEmailUpdateData(values)\n        setLoading1(false)\n        setShowEmailForm(false)\n      }, 1000)\n    },\n  })\n\n  const [loading2, setLoading2] = useState(false)\n\n  const formik2 = useFormik<IUpdatePassword>({\n    initialValues: {\n      ...passwordUpdateData,\n    },\n    validationSchema: passwordFormValidationSchema,\n    onSubmit: (values) => {\n      setLoading2(true)\n      setTimeout((values) => {\n        setPasswordUpdateData(values)\n        setLoading2(false)\n        setPasswordForm(false)\n      }, 1000)\n    },\n  })\n\n  return (\n    <div className='card mb-5 mb-xl-10'>\n      {/* <div\n        className='card-header border-0 cursor-pointer'\n        role='button'\n        data-bs-toggle='collapse'\n        data-bs-target='#kt_account_signin_method'\n      >\n        <div className='card-title m-0'>\n          <h3 className='fw-bolder m-0'>Sign-in Method</h3>\n        </div>\n      </div> */}\n\n      {/* <div id='kt_account_signin_method' className='collapse show'>\n        <div className='card-body border-top p-9'>\n          <div className='d-flex flex-wrap align-items-center'>\n            <div id='kt_signin_email' className={' ' + (showEmailForm && 'd-none')}>\n              <div className='fs-6 fw-bolder mb-1'>Email Address</div>\n              <div className='fw-bold text-gray-600'>support@keenthemes.com</div>\n            </div>\n\n            <div\n              id='kt_signin_email_edit'\n              className={'flex-row-fluid ' + (!showEmailForm && 'd-none')}\n            >\n              <form\n                onSubmit={formik1.handleSubmit}\n                id='kt_signin_change_email'\n                className='form'\n                noValidate\n              >\n                <div className='row mb-6'>\n                  <div className='col-lg-6 mb-4 mb-lg-0'>\n                    <div className='fv-row mb-0'>\n                      <label htmlFor='emailaddress' className='form-label fs-6 fw-bolder mb-3'>\n                        Enter New Email Address\n                      </label>\n                      <input\n                        type='email'\n                        className='form-control form-control-lg form-control-solid'\n                        id='emailaddress'\n                        placeholder='Email Address'\n                        {...formik1.getFieldProps('newEmail')}\n                      />\n                      {formik1.touched.newEmail && formik1.errors.newEmail && (\n                        <div className='fv-plugins-message-container'>\n                          <div className='fv-help-block'>{formik1.errors.newEmail}</div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className='col-lg-6'>\n                    <div className='fv-row mb-0'>\n                      <label\n                        htmlFor='confirmemailpassword'\n                        className='form-label fs-6 fw-bolder mb-3'\n                      >\n                        Confirm Password\n                      </label>\n                      <input\n                        type='password'\n                        className='form-control form-control-lg form-control-solid'\n                        id='confirmemailpassword'\n                        {...formik1.getFieldProps('confirmPassword')}\n                      />\n                      {formik1.touched.confirmPassword && formik1.errors.confirmPassword && (\n                        <div className='fv-plugins-message-container'>\n                          <div className='fv-help-block'>{formik1.errors.confirmPassword}</div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className='d-flex'>\n                  <button\n                    id='kt_signin_submit'\n                    type='submit'\n                    className='btn btn-primary  me-2 px-6'\n                  >\n                    {!loading1 && 'Update Email'}\n                    {loading1 && (\n                      <span className='indicator-progress' style={{display: 'block'}}>\n                        Please wait...{' '}\n                        <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\n                      </span>\n                    )}\n                  </button>\n                  <button\n                    id='kt_signin_cancel'\n                    type='button'\n                    onClick={() => {\n                      setShowEmailForm(false)\n                    }}\n                    className='btn btn-color-gray-400 btn-active-light-primary px-6'\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </form>\n            </div>\n\n            <div id='kt_signin_email_button' className={'ms-auto ' + (showEmailForm && 'd-none')}>\n              <button\n                onClick={() => {\n                  setShowEmailForm(true)\n                }}\n                className='btn btn-light btn-active-light-primary'\n              >\n                Change Email\n              </button>\n            </div>\n          </div>\n\n          <div className='separator separator-dashed my-6'></div>\n\n          <div className='d-flex flex-wrap align-items-center mb-10'>\n            <div id='kt_signin_password' className={' ' + (showPasswordForm && 'd-none')}>\n              <div className='fs-6 fw-bolder mb-1'>Password</div>\n              <div className='fw-bold text-gray-600'>************</div>\n            </div>\n\n            <div\n              id='kt_signin_password_edit'\n              className={'flex-row-fluid ' + (!showPasswordForm && 'd-none')}\n            >\n              <form\n                onSubmit={formik2.handleSubmit}\n                id='kt_signin_change_password'\n                className='form'\n                noValidate\n              >\n                <div className='row mb-1'>\n                  <div className='col-lg-4'>\n                    <div className='fv-row mb-0'>\n                      <label htmlFor='currentpassword' className='form-label fs-6 fw-bolder mb-3'>\n                        Current Password\n                      </label>\n                      <input\n                        type='password'\n                        className='form-control form-control-lg form-control-solid '\n                        id='currentpassword'\n                        {...formik2.getFieldProps('currentPassword')}\n                      />\n                      {formik2.touched.currentPassword && formik2.errors.currentPassword && (\n                        <div className='fv-plugins-message-container'>\n                          <div className='fv-help-block'>{formik2.errors.currentPassword}</div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className='col-lg-4'>\n                    <div className='fv-row mb-0'>\n                      <label htmlFor='newpassword' className='form-label fs-6 fw-bolder mb-3'>\n                        New Password\n                      </label>\n                      <input\n                        type='password'\n                        className='form-control form-control-lg form-control-solid '\n                        id='newpassword'\n                        {...formik2.getFieldProps('newPassword')}\n                      />\n                      {formik2.touched.newPassword && formik2.errors.newPassword && (\n                        <div className='fv-plugins-message-container'>\n                          <div className='fv-help-block'>{formik2.errors.newPassword}</div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className='col-lg-4'>\n                    <div className='fv-row mb-0'>\n                      <label htmlFor='confirmpassword' className='form-label fs-6 fw-bolder mb-3'>\n                        Confirm New Password\n                      </label>\n                      <input\n                        type='password'\n                        className='form-control form-control-lg form-control-solid '\n                        id='confirmpassword'\n                        {...formik2.getFieldProps('passwordConfirmation')}\n                      />\n                      {formik2.touched.passwordConfirmation && formik2.errors.passwordConfirmation && (\n                        <div className='fv-plugins-message-container'>\n                          <div className='fv-help-block'>{formik2.errors.passwordConfirmation}</div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                <div className='form-text mb-5'>\n                  Password must be at least 8 character and contain symbols\n                </div>\n\n                <div className='d-flex'>\n                  <button\n                    id='kt_password_submit'\n                    type='submit'\n                    className='btn btn-primary me-2 px-6'\n                  >\n                    {!loading2 && 'Update Password'}\n                    {loading2 && (\n                      <span className='indicator-progress' style={{display: 'block'}}>\n                        Please wait...{' '}\n                        <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\n                      </span>\n                    )}\n                  </button>\n                  <button\n                    onClick={() => {\n                      setPasswordForm(false)\n                    }}\n                    id='kt_password_cancel'\n                    type='button'\n                    className='btn btn-color-gray-400 btn-active-light-primary px-6'\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </form>\n            </div>\n\n            <div\n              id='kt_signin_password_button'\n              className={'ms-auto ' + (showPasswordForm && 'd-none')}\n            >\n              <button\n                onClick={() => {\n                  setPasswordForm(true)\n                }}\n                className='btn btn-light btn-active-light-primary'\n              >\n                Reset Password\n              </button>\n            </div>\n          </div>\n\n          <div className='notice d-flex bg-light-primary rounded border-primary border border-dashed p-6'>\n            <KTIcon iconName='shield-tick' className='fs-2tx text-primary me-4' />\n            <div className='d-flex flex-stack flex-grow-1 flex-wrap flex-md-nowrap'>\n              <div className='mb-3 mb-md-0 fw-bold'>\n                <h4 className='text-gray-800 fw-bolder'>Secure Your Account</h4>\n                <div className='fs-6 text-gray-600 pe-7'>\n                  Two-factor authentication adds an extra layer of security to your account. To log\n                  in, in addition you'll need to provide a 6 digit code\n                </div>\n              </div>\n              <a\n                href='#'\n                className='btn btn-primary px-6 align-self-center text-nowrap'\n                data-bs-toggle='modal'\n                data-bs-target='#kt_modal_two_factor_authentication'\n              >\n                Enable\n              </a>\n            </div>\n          </div>\n        </div>\n      </div> */}\n    </div>\n  )\n}\n\nexport {SignInMethod}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}