{"ast":null,"code":"import { getUniqueIdWithPrefix } from './_TypesHelpers';\nexport class DOMEventHandlerUtil {\n  static on(element, selector, eventName, callBack) {\n    const eventId = getUniqueIdWithPrefix('DOMEvent');\n    DOMEventHandlerUtil.store.set(eventId, e => {\n      const targets = element.querySelectorAll(selector);\n      let target = e.target;\n      while (target && target !== element) {\n        for (let i = 0; i < targets.length; i++) {\n          if (target === targets[i]) {\n            callBack.call(target, e);\n          }\n        }\n        if (target.parentElement) {\n          target = target.parentElement;\n        } else {\n          target = null;\n        }\n      }\n    });\n    element.addEventListener(eventName, DOMEventHandlerUtil.store.get(eventId));\n    return eventId;\n  }\n  static off(element, eventName, eventId) {\n    const funcFromStore = DOMEventHandlerUtil.store.get(eventId);\n    if (!funcFromStore) {\n      return;\n    }\n    element.removeEventListener(eventName, funcFromStore);\n    DOMEventHandlerUtil.store.delete(eventId);\n  }\n  static one(element, eventName, callBack) {\n    element.addEventListener(eventName, function calee(e) {\n      // remove event\n      if (e.target && e.target.removeEventListener) {\n        e.target.removeEventListener(e.type, calee);\n      }\n      if (element && e && e.currentTarget) {\n        // if (element && element.removeEventListener && e && e.currentTarget) {\n        e.currentTarget.removeEventListener(e.type, calee);\n      }\n\n      // call hander\n      return callBack(e);\n    });\n  }\n}\nDOMEventHandlerUtil.store = new Map();","map":{"version":3,"names":["getUniqueIdWithPrefix","DOMEventHandlerUtil","on","element","selector","eventName","callBack","eventId","store","set","e","targets","querySelectorAll","target","i","length","call","parentElement","addEventListener","get","off","funcFromStore","removeEventListener","delete","one","calee","type","currentTarget","Map"],"sources":["E:/tappware Task/react app/GENText-FrontEnd/src/_metronic/assets/ts/_utils/_DOMEventHandlerUtil.ts"],"sourcesContent":["import {getUniqueIdWithPrefix} from './_TypesHelpers'\r\n\r\nexport class DOMEventHandlerUtil {\r\n  public static store = new Map()\r\n\r\n  public static on(\r\n    element: HTMLElement,\r\n    selector: string,\r\n    eventName: string,\r\n    callBack: any\r\n  ): string {\r\n    const eventId = getUniqueIdWithPrefix('DOMEvent')\r\n    DOMEventHandlerUtil.store.set(eventId, (e: Event) => {\r\n      const targets = element.querySelectorAll(selector)\r\n      let target: HTMLElement | null = e.target as HTMLElement\r\n      while (target && target !== element) {\r\n        for (let i = 0; i < targets.length; i++) {\r\n          if (target === targets[i]) {\r\n            callBack.call(target, e)\r\n          }\r\n        }\r\n\r\n        if (target.parentElement) {\r\n          target = target.parentElement\r\n        } else {\r\n          target = null\r\n        }\r\n      }\r\n    })\r\n    element.addEventListener(eventName, DOMEventHandlerUtil.store.get(eventId))\r\n    return eventId\r\n  }\r\n\r\n  public static off(element: HTMLElement, eventName: string, eventId: string): void {\r\n    const funcFromStore = DOMEventHandlerUtil.store.get(eventId)\r\n    if (!funcFromStore) {\r\n      return\r\n    }\r\n\r\n    element.removeEventListener(eventName, funcFromStore)\r\n    DOMEventHandlerUtil.store.delete(eventId)\r\n  }\r\n\r\n  public static one(element: HTMLElement, eventName: string, callBack: Function): void {\r\n    element.addEventListener(eventName, function calee(e) {\r\n      // remove event\r\n      if (e.target && e.target.removeEventListener) {\r\n        e.target.removeEventListener(e.type, calee)\r\n      }\r\n\r\n      if (element && e && e.currentTarget) {\r\n        // if (element && element.removeEventListener && e && e.currentTarget) {\r\n        e.currentTarget.removeEventListener(e.type, calee)\r\n      }\r\n\r\n      // call hander\r\n      return callBack(e)\r\n    })\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAAQA,qBAAqB,QAAO,iBAAiB;AAErD,OAAO,MAAMC,mBAAmB,CAAC;EAG/B,OAAcC,EAAEA,CACdC,OAAoB,EACpBC,QAAgB,EAChBC,SAAiB,EACjBC,QAAa,EACL;IACR,MAAMC,OAAO,GAAGP,qBAAqB,CAAC,UAAU,CAAC;IACjDC,mBAAmB,CAACO,KAAK,CAACC,GAAG,CAACF,OAAO,EAAGG,CAAQ,IAAK;MACnD,MAAMC,OAAO,GAAGR,OAAO,CAACS,gBAAgB,CAACR,QAAQ,CAAC;MAClD,IAAIS,MAA0B,GAAGH,CAAC,CAACG,MAAqB;MACxD,OAAOA,MAAM,IAAIA,MAAM,KAAKV,OAAO,EAAE;QACnC,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;UACvC,IAAID,MAAM,KAAKF,OAAO,CAACG,CAAC,CAAC,EAAE;YACzBR,QAAQ,CAACU,IAAI,CAACH,MAAM,EAAEH,CAAC,CAAC;UAC1B;QACF;QAEA,IAAIG,MAAM,CAACI,aAAa,EAAE;UACxBJ,MAAM,GAAGA,MAAM,CAACI,aAAa;QAC/B,CAAC,MAAM;UACLJ,MAAM,GAAG,IAAI;QACf;MACF;IACF,CAAC,CAAC;IACFV,OAAO,CAACe,gBAAgB,CAACb,SAAS,EAAEJ,mBAAmB,CAACO,KAAK,CAACW,GAAG,CAACZ,OAAO,CAAC,CAAC;IAC3E,OAAOA,OAAO;EAChB;EAEA,OAAca,GAAGA,CAACjB,OAAoB,EAAEE,SAAiB,EAAEE,OAAe,EAAQ;IAChF,MAAMc,aAAa,GAAGpB,mBAAmB,CAACO,KAAK,CAACW,GAAG,CAACZ,OAAO,CAAC;IAC5D,IAAI,CAACc,aAAa,EAAE;MAClB;IACF;IAEAlB,OAAO,CAACmB,mBAAmB,CAACjB,SAAS,EAAEgB,aAAa,CAAC;IACrDpB,mBAAmB,CAACO,KAAK,CAACe,MAAM,CAAChB,OAAO,CAAC;EAC3C;EAEA,OAAciB,GAAGA,CAACrB,OAAoB,EAAEE,SAAiB,EAAEC,QAAkB,EAAQ;IACnFH,OAAO,CAACe,gBAAgB,CAACb,SAAS,EAAE,SAASoB,KAAKA,CAACf,CAAC,EAAE;MACpD;MACA,IAAIA,CAAC,CAACG,MAAM,IAAIH,CAAC,CAACG,MAAM,CAACS,mBAAmB,EAAE;QAC5CZ,CAAC,CAACG,MAAM,CAACS,mBAAmB,CAACZ,CAAC,CAACgB,IAAI,EAAED,KAAK,CAAC;MAC7C;MAEA,IAAItB,OAAO,IAAIO,CAAC,IAAIA,CAAC,CAACiB,aAAa,EAAE;QACnC;QACAjB,CAAC,CAACiB,aAAa,CAACL,mBAAmB,CAACZ,CAAC,CAACgB,IAAI,EAAED,KAAK,CAAC;MACpD;;MAEA;MACA,OAAOnB,QAAQ,CAACI,CAAC,CAAC;IACpB,CAAC,CAAC;EACJ;AACF;AAzDaT,mBAAmB,CAChBO,KAAK,GAAG,IAAIoB,GAAG,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}