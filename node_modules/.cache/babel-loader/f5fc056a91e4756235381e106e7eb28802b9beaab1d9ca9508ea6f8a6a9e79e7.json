{"ast":null,"code":"import { DataUtil } from './_DataUtil';\nimport { getUniqueIdWithPrefix } from './_TypesHelpers';\nexport class EventHandlerUtil {\n  static setEventMetasByName(name, handlers) {\n    EventHandlerUtil.store[name] = handlers;\n  }\n  static getEventMetaByName(name) {\n    return EventHandlerUtil.store[name];\n  }\n  static setEventMetaByNameAndHandlerId(name, handlerId, meta) {\n    if (EventHandlerUtil.store[name]) {\n      EventHandlerUtil.store[name][handlerId] = meta;\n      return;\n    }\n    EventHandlerUtil.store[name] = {};\n    EventHandlerUtil.store[name][handlerId] = meta;\n  }\n  static getEventMetaByHandlerId(name, handlerId) {\n    const handlersIds = EventHandlerUtil.store[name];\n    if (!handlersIds) {\n      return;\n    }\n    return handlersIds[handlerId];\n  }\n  static setFiredByNameAndHandlerId(name, handerId, fired) {\n    const meta = EventHandlerUtil.getEventMetaByHandlerId(name, handerId);\n    if (!meta) {\n      return;\n    }\n    meta.fired = fired;\n    EventHandlerUtil.setEventMetaByNameAndHandlerId(name, handerId, meta);\n  }\n  static addEvent(element, name, callback) {\n    let one = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const handlerId = getUniqueIdWithPrefix('event');\n    const data = DataUtil.get(element, name);\n    const handlersIds = data ? data : [];\n    handlersIds.push(handlerId);\n    DataUtil.set(element, name, handlersIds);\n    const meta = {\n      name: name,\n      callback: callback,\n      one: one,\n      fired: false\n    };\n    EventHandlerUtil.setEventMetaByNameAndHandlerId(name, handlerId, meta);\n    return handlerId;\n  }\n  static removeEvent(element, name, handerId) {\n    DataUtil.removeOne(element, name, handerId);\n    const handlersIds = EventHandlerUtil.store[name];\n    if (handlersIds) {\n      return;\n    }\n    delete EventHandlerUtil.store[name][handerId];\n  }\n  static trigger(element, name, target, e) {\n    let returnValue = true;\n    if (!DataUtil.has(element, name)) {\n      return returnValue;\n    }\n    let eventValue;\n    let handlerId;\n    const data = DataUtil.get(element, name);\n    const handlersIds = data ? data : [];\n    for (let i = 0; i < handlersIds.length; i++) {\n      handlerId = handlersIds[i];\n      if (EventHandlerUtil.store[name] && EventHandlerUtil.store[name][handlerId]) {\n        const handler = EventHandlerUtil.store[name][handlerId];\n        if (handler.name === name) {\n          if (handler.one) {\n            if (handler.fired) {\n              EventHandlerUtil.store[name][handlerId].fired = true;\n              eventValue = handler.callback.call(this, target);\n            }\n          } else {\n            eventValue = handler.callback.call(this, target);\n          }\n          if (eventValue === false) {\n            returnValue = false;\n          }\n        }\n      }\n    }\n    return returnValue;\n  }\n  static one(element, name, callBack) {\n    EventHandlerUtil.addEvent(element, name, callBack, true);\n  }\n  static off(element, name, handerId) {\n    EventHandlerUtil.removeEvent(element, name, handerId);\n  }\n}\nEventHandlerUtil.store = {};\nEventHandlerUtil.on = function (element, name, callBack) {\n  EventHandlerUtil.addEvent(element, name, callBack, false);\n};","map":{"version":3,"names":["DataUtil","getUniqueIdWithPrefix","EventHandlerUtil","setEventMetasByName","name","handlers","store","getEventMetaByName","setEventMetaByNameAndHandlerId","handlerId","meta","getEventMetaByHandlerId","handlersIds","setFiredByNameAndHandlerId","handerId","fired","addEvent","element","callback","one","arguments","length","undefined","data","get","push","set","removeEvent","removeOne","trigger","target","e","returnValue","has","eventValue","i","handler","call","callBack","off","on"],"sources":["E:/tappware Task/react app/GENText-FrontEnd/src/_metronic/assets/ts/_utils/EventHandlerUtil.ts"],"sourcesContent":["import {DataUtil} from './_DataUtil'\r\nimport {getUniqueIdWithPrefix} from './_TypesHelpers'\r\n\r\nexport interface EventMeta {\r\n  name: string\r\n  callback: Function\r\n  one: boolean\r\n  fired: boolean\r\n}\r\n\r\nexport class EventHandlerUtil {\r\n  static store: {\r\n    [name: string]: {\r\n      [handlerId: string]: EventMeta\r\n    }\r\n  } = {}\r\n\r\n  private static setEventMetasByName(\r\n    name: string,\r\n    handlers: {\r\n      [handlerId: string]: EventMeta\r\n    }\r\n  ): void {\r\n    EventHandlerUtil.store[name] = handlers\r\n  }\r\n\r\n  private static getEventMetaByName(name: string):\r\n    | {\r\n        [handlerId: string]: EventMeta\r\n      }\r\n    | undefined {\r\n    return EventHandlerUtil.store[name]\r\n  }\r\n\r\n  private static setEventMetaByNameAndHandlerId(\r\n    name: string,\r\n    handlerId: string,\r\n    meta: EventMeta\r\n  ): void {\r\n    if (EventHandlerUtil.store[name]) {\r\n      EventHandlerUtil.store[name][handlerId] = meta\r\n      return\r\n    }\r\n    EventHandlerUtil.store[name] = {}\r\n    EventHandlerUtil.store[name][handlerId] = meta\r\n  }\r\n\r\n  private static getEventMetaByHandlerId(name: string, handlerId: string): EventMeta | undefined {\r\n    const handlersIds = EventHandlerUtil.store[name]\r\n    if (!handlersIds) {\r\n      return\r\n    }\r\n    return handlersIds[handlerId]\r\n  }\r\n\r\n  private static setFiredByNameAndHandlerId(name: string, handerId: string, fired: boolean): void {\r\n    const meta = EventHandlerUtil.getEventMetaByHandlerId(name, handerId)\r\n    if (!meta) {\r\n      return\r\n    }\r\n\r\n    meta.fired = fired\r\n    EventHandlerUtil.setEventMetaByNameAndHandlerId(name, handerId, meta)\r\n  }\r\n\r\n  private static addEvent(\r\n    element: HTMLElement,\r\n    name: string,\r\n    callback: Function,\r\n    one: boolean = false\r\n  ): string {\r\n    const handlerId = getUniqueIdWithPrefix('event')\r\n    const data = DataUtil.get(element, name)\r\n    const handlersIds = data ? (data as string[]) : []\r\n    handlersIds.push(handlerId)\r\n\r\n    DataUtil.set(element, name, handlersIds)\r\n\r\n    const meta: EventMeta = {\r\n      name: name,\r\n      callback: callback,\r\n      one: one,\r\n      fired: false,\r\n    }\r\n\r\n    EventHandlerUtil.setEventMetaByNameAndHandlerId(name, handlerId, meta)\r\n    return handlerId\r\n  }\r\n\r\n  private static removeEvent(element: HTMLElement, name: string, handerId: string) {\r\n    DataUtil.removeOne(element, name, handerId)\r\n    const handlersIds = EventHandlerUtil.store[name]\r\n    if (handlersIds) {\r\n      return\r\n    }\r\n\r\n    delete EventHandlerUtil.store[name][handerId]\r\n  }\r\n\r\n  public static trigger(element: HTMLElement, name: string, target?: any, e?: Event): boolean {\r\n    let returnValue = true\r\n    if (!DataUtil.has(element, name)) {\r\n      return returnValue\r\n    }\r\n\r\n    let eventValue\r\n    let handlerId\r\n    const data = DataUtil.get(element, name)\r\n    const handlersIds = data ? (data as string[]) : []\r\n    for (let i = 0; i < handlersIds.length; i++) {\r\n      handlerId = handlersIds[i]\r\n      if (EventHandlerUtil.store[name] && EventHandlerUtil.store[name][handlerId]) {\r\n        const handler = EventHandlerUtil.store[name][handlerId]\r\n        if (handler.name === name) {\r\n          if (handler.one) {\r\n            if (handler.fired) {\r\n              EventHandlerUtil.store[name][handlerId].fired = true\r\n              eventValue = handler.callback.call(this, target)\r\n            }\r\n          } else {\r\n            eventValue = handler.callback.call(this, target)\r\n          }\r\n\r\n          if (eventValue === false) {\r\n            returnValue = false\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return returnValue\r\n  }\r\n\r\n  public static on = function (element: HTMLElement, name: string, callBack: Function): void {\r\n    EventHandlerUtil.addEvent(element, name, callBack, false)\r\n  }\r\n\r\n  public static one(element: HTMLElement, name: string, callBack: Function): void {\r\n    EventHandlerUtil.addEvent(element, name, callBack, true)\r\n  }\r\n\r\n  public static off(element: HTMLElement, name: string, handerId: string): void {\r\n    EventHandlerUtil.removeEvent(element, name, handerId)\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}