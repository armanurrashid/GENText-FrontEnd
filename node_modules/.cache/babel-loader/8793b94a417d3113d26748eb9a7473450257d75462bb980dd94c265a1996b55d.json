{"ast":null,"code":"var _jsxFileName = \"E:\\\\GENText\\\\src\\\\index.tsx\";\nimport { createRoot } from 'react-dom/client';\n// Axios\nimport axios from 'axios';\nimport { Chart, registerables } from 'chart.js';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n// import {ReactQueryDevtools} from 'react-query/devtools'\n// Apps\nimport { MetronicI18nProvider } from './_metronic/i18n/Metronici18n';\nimport './_metronic/assets/sass/style.react.scss';\nimport './_metronic/assets/fonticon/fonticon.css';\nimport './_metronic/assets/keenicons/duotone/style.css';\nimport './_metronic/assets/keenicons/outline/style.css';\nimport './_metronic/assets/keenicons/solid/style.css';\n/**\n * TIP: Replace this style import with rtl styles to enable rtl mode\n *\n * import './_metronic/assets/css/style.rtl.css'\n **/\nimport './_metronic/assets/sass/style.scss';\nimport './_metronic/assets/sass/plugins.scss';\nimport { AppRoutes } from './app/routing/AppRoutes';\nimport { AuthProvider, setupAxios } from './app/modules/auth';\n/**\n * Creates `axios-mock-adapter` instance for provided `axios` instance, add\n * basic Metronic mocks and returns it.\n *\n * @see https://github.com/ctimmerm/axios-mock-adapter\n */\n/**\n * Inject Metronic interceptors for axios.\n *\n * @see https://github.com/axios/axios#interceptors\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nsetupAxios(axios);\nChart.register(...registerables);\nconst queryClient = new QueryClient();\nconst container = document.getElementById('root');\nif (container) {\n  createRoot(container).render( /*#__PURE__*/_jsxDEV(QueryClientProvider, {\n    client: queryClient,\n    children: /*#__PURE__*/_jsxDEV(MetronicI18nProvider, {\n      children: /*#__PURE__*/_jsxDEV(AuthProvider, {\n        children: /*#__PURE__*/_jsxDEV(AppRoutes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this));\n}","map":{"version":3,"names":["createRoot","axios","Chart","registerables","QueryClient","QueryClientProvider","MetronicI18nProvider","AppRoutes","AuthProvider","setupAxios","jsxDEV","_jsxDEV","register","queryClient","container","document","getElementById","render","client","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["E:/GENText/src/index.tsx"],"sourcesContent":["import {createRoot} from 'react-dom/client'\n// Axios\nimport axios from 'axios'\nimport {Chart, registerables} from 'chart.js'\nimport {QueryClient, QueryClientProvider} from 'react-query'\n// import {ReactQueryDevtools} from 'react-query/devtools'\n// Apps\nimport {MetronicI18nProvider} from './_metronic/i18n/Metronici18n'\nimport './_metronic/assets/sass/style.react.scss'\nimport './_metronic/assets/fonticon/fonticon.css'\nimport './_metronic/assets/keenicons/duotone/style.css'\nimport './_metronic/assets/keenicons/outline/style.css'\nimport './_metronic/assets/keenicons/solid/style.css'\n/**\n * TIP: Replace this style import with rtl styles to enable rtl mode\n *\n * import './_metronic/assets/css/style.rtl.css'\n **/\nimport './_metronic/assets/sass/style.scss'\nimport './_metronic/assets/sass/plugins.scss'\nimport {AppRoutes} from './app/routing/AppRoutes'\nimport {AuthProvider, setupAxios} from './app/modules/auth'\n/**\n * Creates `axios-mock-adapter` instance for provided `axios` instance, add\n * basic Metronic mocks and returns it.\n *\n * @see https://github.com/ctimmerm/axios-mock-adapter\n */\n/**\n * Inject Metronic interceptors for axios.\n *\n * @see https://github.com/axios/axios#interceptors\n */\nsetupAxios(axios)\nChart.register(...registerables)\n\nconst queryClient = new QueryClient()\nconst container = document.getElementById('root')\nif (container) {\n  createRoot(container).render(\n    <QueryClientProvider client={queryClient}>\n      <MetronicI18nProvider>\n        <AuthProvider>\n          <AppRoutes />\n        </AuthProvider>\n      </MetronicI18nProvider>\n      {/* <ReactQueryDevtools initialIsOpen={false} /> */}\n    </QueryClientProvider>\n  )\n}\n"],"mappings":";AAAA,SAAQA,UAAU,QAAO,kBAAkB;AAC3C;AACA,OAAOC,KAAK,MAAM,OAAO;AACzB,SAAQC,KAAK,EAAEC,aAAa,QAAO,UAAU;AAC7C,SAAQC,WAAW,EAAEC,mBAAmB,QAAO,aAAa;AAC5D;AACA;AACA,SAAQC,oBAAoB,QAAO,+BAA+B;AAClE,OAAO,0CAA0C;AACjD,OAAO,0CAA0C;AACjD,OAAO,gDAAgD;AACvD,OAAO,gDAAgD;AACvD,OAAO,8CAA8C;AACrD;AACA;AACA;AACA;AACA;AACA,OAAO,oCAAoC;AAC3C,OAAO,sCAAsC;AAC7C,SAAQC,SAAS,QAAO,yBAAyB;AACjD,SAAQC,YAAY,EAAEC,UAAU,QAAO,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAKAF,UAAU,CAACR,KAAK,CAAC;AACjBC,KAAK,CAACU,QAAQ,CAAC,GAAGT,aAAa,CAAC;AAEhC,MAAMU,WAAW,GAAG,IAAIT,WAAW,CAAC,CAAC;AACrC,MAAMU,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;AACjD,IAAIF,SAAS,EAAE;EACbd,UAAU,CAACc,SAAS,CAAC,CAACG,MAAM,eAC1BN,OAAA,CAACN,mBAAmB;IAACa,MAAM,EAAEL,WAAY;IAAAM,QAAA,eACvCR,OAAA,CAACL,oBAAoB;MAAAa,QAAA,eACnBR,OAAA,CAACH,YAAY;QAAAW,QAAA,eACXR,OAAA,CAACJ,SAAS;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEJ,CACvB,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}